{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluid",
          "name": "host",
          "type": "address"
        },
        {
          "internalType": "contract IConstantInflowNFT",
          "name": "constantInflowNFT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_TO_CALLER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_INVALID_TOKEN_ID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_INVALID_SUPER_TOKEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_MINT_TO_ZERO_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_ONLY_CONSTANT_INFLOW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "COF_NFT_TOKEN_ALREADY_EXISTS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "name": "CodeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONSTANT_FLOW_AGREEMENT_V1",
      "outputs": [
        {
          "internalType": "contract IConstantFlowAgreementV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CONSTANT_INFLOW_NFT",
      "outputs": [
        {
          "internalType": "contract IConstantInflowNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_BASE_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HOST",
      "outputs": [
        {
          "internalType": "contract ISuperfluid",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "castrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "flowDataByTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "flowStartDate",
              "type": "uint32"
            }
          ],
          "internalType": "struct IFlowNFTBase.FlowNFTData",
          "name": "flowData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCodeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "onCreate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "onDelete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISuperfluidToken",
          "name": "superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "flowReceiver",
          "type": "address"
        }
      ],
      "name": "onUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "triggerMetadataUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60e06040523480156200001157600080fd5b506040516200246f3803806200246f8339810160408190526200003491620000fd565b6001600160a01b03821660a0819052604051635b69006f60e11b81527fa9214cc96615e0085d3bb077758db69497dc2dce3b2b1e97bc93c3d18d83efd3600482015283919063b6d200de90602401602060405180830381865afa158015620000a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c691906200013c565b6001600160a01b039081166080529190911660c05250620001639050565b6001600160a01b0381168114620000fa57600080fd5b50565b600080604083850312156200011157600080fd5b82516200011e81620000e4565b60208401519092506200013181620000e4565b809150509250929050565b6000602082840312156200014f57600080fd5b81516200015c81620000e4565b9392505050565b60805160a05160c0516122a4620001cb600039600081816102f001528181610b4901528181610c430152610d5a0152600081816102c9015261068901526000818161025601528181610abc01528181610bbf01528181610cbb015261125201526122a46000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063a22cb465116100a2578063e985e9c511610071578063e985e9c514610449578063eb54a7ca1461045c578063ef1f02371461046f578063f7e3d9831461048257600080fd5b8063a22cb46514610408578063a497325b1461041b578063b88d4fde14610423578063c87b56dd1461043657600080fd5b806389f71d2d116100de57806389f71d2d1461038c5780638d47859e1461039f57806395d89b41146103f85780639903ad381461040057600080fd5b80636352211e1461035d5780636c0360eb1461037057806370a082311461037857600080fd5b806342842e0e116101715780634c5c0c851161014b5780634c5c0c85146102eb5780634cd88b761461031257806350d75d251461032557806352d1902d1461032d57600080fd5b806342842e0e1461029e57806346951954146102b157806349f289dc146102c457600080fd5b8063095ea7b3116101ad578063095ea7b31461023c578063181561011461025157806323b872dd146102785780632f3885601461028b57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e23660046119a4565b610495565b60405190151581526020015b60405180910390f35b6102046104e7565b6040516101f391906119f2565b61022461021f366004611a25565b610579565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611a53565b6105a0565b005b6102247f000000000000000000000000000000000000000000000000000000000000000081565b61024f610286366004611a7f565b61062c565b61024f610299366004611a25565b61065e565b61024f6102ac366004611a7f565b61066a565b61024f6102bf366004611ac0565b610685565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b61024f610320366004611baa565b610741565b610224610827565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b7845b6040519081526020016101f3565b61022461036b366004611a25565b610856565b61020461088f565b61034f610386366004611ac0565b50600190565b61034f61039a366004611c0e565b6108af565b6103b26103ad366004611a25565b6108c4565b6040805182516001600160a01b03908116825260208085015182169083015283830151169181019190915260609182015163ffffffff16918101919091526080016101f3565b610204610945565b61024f610954565b61024f610416366004611c59565b610a16565b610204610a21565b61024f610431366004611c97565b610a3d565b610204610444366004611a25565b610a76565b6101e7610457366004611d17565b610a83565b61024f61046a366004611c0e565b610ab1565b61024f61047d366004611c0e565b610bb4565b61024f610490366004611c0e565b610cb0565b60006301ffc9a760e01b6001600160e01b0319831614806104c657506380ac58cd60e01b6001600160e01b03198316145b806104e15750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600180546104f690611d45565b80601f016020809104026020016040519081016040528092919081815260200182805461052290611d45565b801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058482610d89565b506000908152600360205260409020546001600160a01b031690565b60006105ab82610856565b9050806001600160a01b0316836001600160a01b0316036105df5760405163e4790b2560e01b815260040160405180910390fd5b336001600160a01b038216148015906105ff57506105fd8133610a83565b155b1561061d5760405163519a92c160e11b815260040160405180910390fd5b6106278383610dc1565b505050565b6106363382610e2b565b610653576040516312a8eb0360e11b815260040160405180910390fd5b610627838383610e89565b61066781610ea2565b50565b61062783838360405180602001604052806000815250610a3d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663731aed6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190611d7f565b9050336001600160a01b038216146107345760405163ebb7505b60e01b815260040160405180910390fd5b61073d82610ed2565b5050565b600054610100900460ff16158080156107615750600054600160ff909116105b8061077b5750303b15801561077b575060005460ff166001145b6107a05760405162461bcd60e51b815260040161079790611d9c565b60405180910390fd5b6000805460ff1916600117905580156107c3576000805461ff0019166101001790555b60016107cf8482611e38565b5060026107dc8382611e38565b508015610627576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60006108517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b905090565b6000818152601660205260408120600101546001600160a01b0316806104e15760405163eab95e3b60e01b815260040160405180910390fd5b60606040518060600160405280602d8152602001612242602d9139905090565b60006108bc84848461110c565b949350505050565b60408051608081018252600080825260208201819052918101829052606081019190915250600090815260166020908152604091829020825160808101845281546001600160a01b039081168252600183015481169382019390935260029091015491821692810192909252600160a01b900463ffffffff16606082015290565b6060600280546104f690611d45565b600054610100900460ff16158080156109745750600054600160ff909116105b8061098e5750303b15801561098e575060005460ff166001145b6109aa5760405162461bcd60e51b815260040161079790611d9c565b6000805460ff1916600117905580156109cd576000805461ff0019166101001790555b8015610667576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61073d338383611158565b6040518060600160405280602d8152602001612242602d913981565b610a473383610e2b565b610a64576040516312a8eb0360e11b815260040160405180910390fd5b610a70848484846111f7565b50505050565b60606104e1826000611202565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610afa5760405163d367b64f60e01b815260040160405180910390fd5b6000610b0784848461110c565b6000818152601660205260409020600101549091506001600160a01b031615610a7057610b3381610ea2565b604051630179c42b60e51b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f388560906024015b600060405180830381600087803b158015610b9657600080fd5b505af1158015610baa573d6000803e3d6000fd5b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfd5760405163d367b64f60e01b815260040160405180910390fd5b6000610c0a84848461110c565b6000818152601660205260409020600101549091506001600160a01b031615610a7057604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b50505050610a708161135d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cf95760405163d367b64f60e01b815260040160405180910390fd5b6000610d0684848461110c565b6000818152601660205260409020600101549091506001600160a01b0316610a7057610d34848484846113ec565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401610b7c565b6000818152601660205260409020600101546001600160a01b03166106675760405163eab95e3b60e01b815260040160405180910390fd5b600081815260036020908152604080832080546001600160a01b0319166001600160a01b038781169182179092556016909352818420600101549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b600080610e3783610856565b9050806001600160a01b0316846001600160a01b03161480610e5e5750610e5e8185610a83565b806108bc5750836001600160a01b0316610e7784610579565b6001600160a01b031614949350505050565b60405163553a3f6560e11b815260040160405180910390fd5b6040518181527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790602001610a0b565b6000610efc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b031603610f525760405162461bcd60e51b815260206004820152601d60248201527f5555505350726f786961626c653a206e6f742075706772616461626c650000006044820152606401610797565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190611ef8565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b7841461102e5760405162461bcd60e51b815260206004820152602360248201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60448201526267696360e81b6064820152608401610797565b6001600160a01b03811630036110865760405162461bcd60e51b815260206004820152601960248201527f5555505350726f786961626c653a2070726f7879206c6f6f70000000000000006044820152606401610797565b6110ae817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784604080519182526001600160a01b038416602083015201610a0b565b60408051466020808301919091526001600160a01b03958616828401529385166060820152919093166080808301919091528351808303909101815260a0909101909252815191012090565b816001600160a01b0316836001600160a01b03160361118a5760405163d3c7732960e01b815260040160405180910390fd5b6001600160a01b03838116600081815260046020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a70848484610e89565b6060600061120f846108c4565b805160208201516040808401519051631cd43d1160e31b81526001600160a01b0380851660048301529283166024820152908216604482015292935090916000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a1e88890606401608060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190611f11565b50509150506112ca61088f565b6112e1826bffffffffffffffffffffffff1661151b565b8661130857604051806040016040528060048152602001637472756560e01b815250611327565b6040518060400160405280600581526020016466616c736560d81b8152505b611330896115ae565b6040516020016113439493929190611f71565b604051602081830303815290604052935050505092915050565b60008181526016602081815260408084206001810180546003855283872080546001600160a01b0319908116909155959094528154851682558054909416909355600290920180546001600160c01b031916905590516001600160a01b0390911691839183907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b03831661140257611402611ff9565b816001600160a01b0316836001600160a01b03160361142357611423611ff9565b6000818152601660205260409020600101546001600160a01b03161561144b5761144b611ff9565b604080516080810182526001600160a01b038087168252858116602080840182815287841685870190815263ffffffff4281166060880190815260008a81526016909552888520975188549088166001600160a01b0319918216178955935160018901805491891691909516179093559051600290960180549251909116600160a01b026001600160c01b03199092169590941694909417939093179091559151839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b6060600061152883611729565b600101905060008167ffffffffffffffff81111561154857611548611add565b6040519080825280601f01601f191660200182016040528015611572576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461157c57509392505050565b606060006115bb836108c4565b90506115d581600001516001600160a01b03166014611801565b6115de4661151b565b82600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611620573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611648919081019061200f565b61166084602001516001600160a01b03166014611801565b61167885604001516001600160a01b03166014611801565b6116e986600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190612086565b60ff1661151b565b6116fc876060015163ffffffff1661151b565b60405160200161171297969594939291906120a9565b604051602081830303815290604052915050919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106117685772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611794576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106117b257662386f26fc10000830492506010015b6305f5e10083106117ca576305f5e100830492506008015b61271083106117de57612710830492506004015b606483106117f0576064830492506002015b600a83106104e15760010192915050565b606060006118108360026121ea565b61181b906002612201565b67ffffffffffffffff81111561183357611833611add565b6040519080825280601f01601f19166020018201604052801561185d576020820181803683370190505b509050600360fc1b8160008151811061187857611878612214565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118a7576118a7612214565b60200101906001600160f81b031916908160001a90535060006118cb8460026121ea565b6118d6906001612201565b90505b600181111561194e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061190a5761190a612214565b1a60f81b82828151811061192057611920612214565b60200101906001600160f81b031916908160001a90535060049490941c936119478161222a565b90506118d9565b50831561199d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610797565b9392505050565b6000602082840312156119b657600080fd5b81356001600160e01b03198116811461199d57600080fd5b60005b838110156119e95781810151838201526020016119d1565b50506000910152565b6020815260008251806020840152611a118160408501602087016119ce565b601f01601f19169190910160400192915050565b600060208284031215611a3757600080fd5b5035919050565b6001600160a01b038116811461066757600080fd5b60008060408385031215611a6657600080fd5b8235611a7181611a3e565b946020939093013593505050565b600080600060608486031215611a9457600080fd5b8335611a9f81611a3e565b92506020840135611aaf81611a3e565b929592945050506040919091013590565b600060208284031215611ad257600080fd5b813561199d81611a3e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1c57611b1c611add565b604052919050565b600067ffffffffffffffff821115611b3e57611b3e611add565b50601f01601f191660200190565b6000611b5f611b5a84611b24565b611af3565b9050828152838383011115611b7357600080fd5b828260208301376000602084830101529392505050565b600082601f830112611b9b57600080fd5b61199d83833560208501611b4c565b60008060408385031215611bbd57600080fd5b823567ffffffffffffffff80821115611bd557600080fd5b611be186838701611b8a565b93506020850135915080821115611bf757600080fd5b50611c0485828601611b8a565b9150509250929050565b600080600060608486031215611c2357600080fd5b8335611c2e81611a3e565b92506020840135611c3e81611a3e565b91506040840135611c4e81611a3e565b809150509250925092565b60008060408385031215611c6c57600080fd5b8235611c7781611a3e565b915060208301358015158114611c8c57600080fd5b809150509250929050565b60008060008060808587031215611cad57600080fd5b8435611cb881611a3e565b93506020850135611cc881611a3e565b925060408501359150606085013567ffffffffffffffff811115611ceb57600080fd5b8501601f81018713611cfc57600080fd5b611d0b87823560208401611b4c565b91505092959194509250565b60008060408385031215611d2a57600080fd5b8235611d3581611a3e565b91506020830135611c8c81611a3e565b600181811c90821680611d5957607f821691505b602082108103611d7957634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611d9157600080fd5b815161199d81611a3e565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b601f82111561062757600081815260208120601f850160051c81016020861015611e115750805b601f850160051c820191505b81811015611e3057828155600101611e1d565b505050505050565b815167ffffffffffffffff811115611e5257611e52611add565b611e6681611e608454611d45565b84611dea565b602080601f831160018114611e9b5760008415611e835750858301515b600019600386901b1c1916600185901b178555611e30565b600085815260208120601f198616915b82811015611eca57888601518255948401946001909101908401611eab565b5085821015611ee85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611f0a57600080fd5b5051919050565b60008060008060808587031215611f2757600080fd5b84519350602085015180600b0b8114611f3f57600080fd5b6040860151606090960151949790965092505050565b60008151611f678185602086016119ce565b9290920192915050565b60008551611f83818460208a016119ce565b693f666c6f77526174653d60b01b9083019081528551611faa81600a840160208a016119ce565b69266f7574676f696e673d60b01b600a92909101918201528451611fd58160148401602089016119ce565b8451910190611feb8160148401602088016119ce565b016014019695505050505050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561202157600080fd5b815167ffffffffffffffff81111561203857600080fd5b8201601f8101841361204957600080fd5b8051612057611b5a82611b24565b81815285602083850101111561206c57600080fd5b61207d8260208301602086016119ce565b95945050505050565b60006020828403121561209857600080fd5b815160ff8116811461199d57600080fd5b6e26746f6b656e5f616464726573733d60881b8152600088516120d381600f850160208d016119ce565b6926636861696e5f69643d60b01b600f9184019182015288516120fd816019840160208d016119ce565b6d26746f6b656e5f73796d626f6c3d60901b60199290910191820152875161212c816027840160208c016119ce565b672673656e6465723d60c01b60279290910191820152865161215581602f840160208b016119ce565b692672656365697665723d60b01b602f92909101918201526121c66121c06121a86121a2612186603986018b611f55565b6f26746f6b656e5f646563696d616c733d60801b815260100190565b88611f55565b6b2673746172745f646174653d60a01b8152600c0190565b85611f55565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104e1576104e16121d4565b808201808211156104e1576104e16121d4565b634e487b7160e01b600052603260045260246000fd5b600081612239576122396121d4565b50600019019056fe68747470733a2f2f6e66742e7375706572666c7569642e66696e616e63652f6366612f76322f6765746d657461a26469706673582212205be9af8ff58edb1e7f588603a281111094984f58bd9aecae5d6537727d063ab264736f6c63430008130033",
    "sourceMap": "876:6796:89:-:0;;;1372:164;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4084:11:90;;;;;;4197:146;;-1:-1:-1;;;4197:146:90;;4254:71;4197:146;;;774:25:118;4084:11:90;;;4197:35;;747:18:118;;4197:146:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4105:262:90;;;;;1490:39:89;;;::::1;;::::0;-1:-1:-1;876:6796:89;;-1:-1:-1;876:6796:89;14:144:118;-1:-1:-1;;;;;102:31:118;;92:42;;82:70;;148:1;145;138:12;82:70;14:144;:::o;163:460::-;291:6;299;352:2;340:9;331:7;327:23;323:32;320:52;;;368:1;365;358:12;320:52;400:9;394:16;419:44;457:5;419:44;:::i;:::-;532:2;517:18;;511:25;482:5;;-1:-1:-1;545:46:118;511:25;545:46;:::i;:::-;610:7;600:17;;;163:460;;;;;:::o;810:289::-;905:6;958:2;946:9;937:7;933:23;929:32;926:52;;;974:1;971;964:12;926:52;1006:9;1000:16;1025:44;1063:5;1025:44;:::i;:::-;1088:5;810:289;-1:-1:-1;;;810:289:118:o;:::-;876:6796:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e11610104578063a22cb465116100a2578063e985e9c511610071578063e985e9c514610449578063eb54a7ca1461045c578063ef1f02371461046f578063f7e3d9831461048257600080fd5b8063a22cb46514610408578063a497325b1461041b578063b88d4fde14610423578063c87b56dd1461043657600080fd5b806389f71d2d116100de57806389f71d2d1461038c5780638d47859e1461039f57806395d89b41146103f85780639903ad381461040057600080fd5b80636352211e1461035d5780636c0360eb1461037057806370a082311461037857600080fd5b806342842e0e116101715780634c5c0c851161014b5780634c5c0c85146102eb5780634cd88b761461031257806350d75d251461032557806352d1902d1461032d57600080fd5b806342842e0e1461029e57806346951954146102b157806349f289dc146102c457600080fd5b8063095ea7b3116101ad578063095ea7b31461023c578063181561011461025157806323b872dd146102785780632f3885601461028b57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e23660046119a4565b610495565b60405190151581526020015b60405180910390f35b6102046104e7565b6040516101f391906119f2565b61022461021f366004611a25565b610579565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611a53565b6105a0565b005b6102247f000000000000000000000000000000000000000000000000000000000000000081565b61024f610286366004611a7f565b61062c565b61024f610299366004611a25565b61065e565b61024f6102ac366004611a7f565b61066a565b61024f6102bf366004611ac0565b610685565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b6102247f000000000000000000000000000000000000000000000000000000000000000081565b61024f610320366004611baa565b610741565b610224610827565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b7845b6040519081526020016101f3565b61022461036b366004611a25565b610856565b61020461088f565b61034f610386366004611ac0565b50600190565b61034f61039a366004611c0e565b6108af565b6103b26103ad366004611a25565b6108c4565b6040805182516001600160a01b03908116825260208085015182169083015283830151169181019190915260609182015163ffffffff16918101919091526080016101f3565b610204610945565b61024f610954565b61024f610416366004611c59565b610a16565b610204610a21565b61024f610431366004611c97565b610a3d565b610204610444366004611a25565b610a76565b6101e7610457366004611d17565b610a83565b61024f61046a366004611c0e565b610ab1565b61024f61047d366004611c0e565b610bb4565b61024f610490366004611c0e565b610cb0565b60006301ffc9a760e01b6001600160e01b0319831614806104c657506380ac58cd60e01b6001600160e01b03198316145b806104e15750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600180546104f690611d45565b80601f016020809104026020016040519081016040528092919081815260200182805461052290611d45565b801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058482610d89565b506000908152600360205260409020546001600160a01b031690565b60006105ab82610856565b9050806001600160a01b0316836001600160a01b0316036105df5760405163e4790b2560e01b815260040160405180910390fd5b336001600160a01b038216148015906105ff57506105fd8133610a83565b155b1561061d5760405163519a92c160e11b815260040160405180910390fd5b6106278383610dc1565b505050565b6106363382610e2b565b610653576040516312a8eb0360e11b815260040160405180910390fd5b610627838383610e89565b61066781610ea2565b50565b61062783838360405180602001604052806000815250610a3d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663731aed6e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107099190611d7f565b9050336001600160a01b038216146107345760405163ebb7505b60e01b815260040160405180910390fd5b61073d82610ed2565b5050565b600054610100900460ff16158080156107615750600054600160ff909116105b8061077b5750303b15801561077b575060005460ff166001145b6107a05760405162461bcd60e51b815260040161079790611d9c565b60405180910390fd5b6000805460ff1916600117905580156107c3576000805461ff0019166101001790555b60016107cf8482611e38565b5060026107dc8382611e38565b508015610627576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60006108517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b905090565b6000818152601660205260408120600101546001600160a01b0316806104e15760405163eab95e3b60e01b815260040160405180910390fd5b60606040518060600160405280602d8152602001612242602d9139905090565b60006108bc84848461110c565b949350505050565b60408051608081018252600080825260208201819052918101829052606081019190915250600090815260166020908152604091829020825160808101845281546001600160a01b039081168252600183015481169382019390935260029091015491821692810192909252600160a01b900463ffffffff16606082015290565b6060600280546104f690611d45565b600054610100900460ff16158080156109745750600054600160ff909116105b8061098e5750303b15801561098e575060005460ff166001145b6109aa5760405162461bcd60e51b815260040161079790611d9c565b6000805460ff1916600117905580156109cd576000805461ff0019166101001790555b8015610667576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b61073d338383611158565b6040518060600160405280602d8152602001612242602d913981565b610a473383610e2b565b610a64576040516312a8eb0360e11b815260040160405180910390fd5b610a70848484846111f7565b50505050565b60606104e1826000611202565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610afa5760405163d367b64f60e01b815260040160405180910390fd5b6000610b0784848461110c565b6000818152601660205260409020600101549091506001600160a01b031615610a7057610b3381610ea2565b604051630179c42b60e51b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632f388560906024015b600060405180830381600087803b158015610b9657600080fd5b505af1158015610baa573d6000803e3d6000fd5b5050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfd5760405163d367b64f60e01b815260040160405180910390fd5b6000610c0a84848461110c565b6000818152601660205260409020600101549091506001600160a01b031615610a7057604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015610c8f57600080fd5b505af1158015610ca3573d6000803e3d6000fd5b50505050610a708161135d565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cf95760405163d367b64f60e01b815260040160405180910390fd5b6000610d0684848461110c565b6000818152601660205260409020600101549091506001600160a01b0316610a7057610d34848484846113ec565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401610b7c565b6000818152601660205260409020600101546001600160a01b03166106675760405163eab95e3b60e01b815260040160405180910390fd5b600081815260036020908152604080832080546001600160a01b0319166001600160a01b038781169182179092556016909352818420600101549151859492909116917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a45050565b600080610e3783610856565b9050806001600160a01b0316846001600160a01b03161480610e5e5750610e5e8185610a83565b806108bc5750836001600160a01b0316610e7784610579565b6001600160a01b031614949350505050565b60405163553a3f6560e11b815260040160405180910390fd5b6040518181527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce790602001610a0b565b6000610efc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6001600160a01b031603610f525760405162461bcd60e51b815260206004820152601d60248201527f5555505350726f786961626c653a206e6f742075706772616461626c650000006044820152606401610797565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb49190611ef8565b7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b7841461102e5760405162461bcd60e51b815260206004820152602360248201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60448201526267696360e81b6064820152608401610797565b6001600160a01b03811630036110865760405162461bcd60e51b815260206004820152601960248201527f5555505350726f786961626c653a2070726f7879206c6f6f70000000000000006044820152606401610797565b6110ae817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc7f87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784604080519182526001600160a01b038416602083015201610a0b565b60408051466020808301919091526001600160a01b03958616828401529385166060820152919093166080808301919091528351808303909101815260a0909101909252815191012090565b816001600160a01b0316836001600160a01b03160361118a5760405163d3c7732960e01b815260040160405180910390fd5b6001600160a01b03838116600081815260046020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a70848484610e89565b6060600061120f846108c4565b805160208201516040808401519051631cd43d1160e31b81526001600160a01b0380851660048301529283166024820152908216604482015292935090916000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a1e88890606401608060405180830381865afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bd9190611f11565b50509150506112ca61088f565b6112e1826bffffffffffffffffffffffff1661151b565b8661130857604051806040016040528060048152602001637472756560e01b815250611327565b6040518060400160405280600581526020016466616c736560d81b8152505b611330896115ae565b6040516020016113439493929190611f71565b604051602081830303815290604052935050505092915050565b60008181526016602081815260408084206001810180546003855283872080546001600160a01b0319908116909155959094528154851682558054909416909355600290920180546001600160c01b031916905590516001600160a01b0390911691839183907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b03831661140257611402611ff9565b816001600160a01b0316836001600160a01b03160361142357611423611ff9565b6000818152601660205260409020600101546001600160a01b03161561144b5761144b611ff9565b604080516080810182526001600160a01b038087168252858116602080840182815287841685870190815263ffffffff4281166060880190815260008a81526016909552888520975188549088166001600160a01b0319918216178955935160018901805491891691909516179093559051600290960180549251909116600160a01b026001600160c01b03199092169590941694909417939093179091559151839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a450505050565b6060600061152883611729565b600101905060008167ffffffffffffffff81111561154857611548611add565b6040519080825280601f01601f191660200182016040528015611572576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461157c57509392505050565b606060006115bb836108c4565b90506115d581600001516001600160a01b03166014611801565b6115de4661151b565b82600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611620573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611648919081019061200f565b61166084602001516001600160a01b03166014611801565b61167885604001516001600160a01b03166014611801565b6116e986600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e19190612086565b60ff1661151b565b6116fc876060015163ffffffff1661151b565b60405160200161171297969594939291906120a9565b604051602081830303815290604052915050919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106117685772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611794576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106117b257662386f26fc10000830492506010015b6305f5e10083106117ca576305f5e100830492506008015b61271083106117de57612710830492506004015b606483106117f0576064830492506002015b600a83106104e15760010192915050565b606060006118108360026121ea565b61181b906002612201565b67ffffffffffffffff81111561183357611833611add565b6040519080825280601f01601f19166020018201604052801561185d576020820181803683370190505b509050600360fc1b8160008151811061187857611878612214565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118a7576118a7612214565b60200101906001600160f81b031916908160001a90535060006118cb8460026121ea565b6118d6906001612201565b90505b600181111561194e576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061190a5761190a612214565b1a60f81b82828151811061192057611920612214565b60200101906001600160f81b031916908160001a90535060049490941c936119478161222a565b90506118d9565b50831561199d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610797565b9392505050565b6000602082840312156119b657600080fd5b81356001600160e01b03198116811461199d57600080fd5b60005b838110156119e95781810151838201526020016119d1565b50506000910152565b6020815260008251806020840152611a118160408501602087016119ce565b601f01601f19169190910160400192915050565b600060208284031215611a3757600080fd5b5035919050565b6001600160a01b038116811461066757600080fd5b60008060408385031215611a6657600080fd5b8235611a7181611a3e565b946020939093013593505050565b600080600060608486031215611a9457600080fd5b8335611a9f81611a3e565b92506020840135611aaf81611a3e565b929592945050506040919091013590565b600060208284031215611ad257600080fd5b813561199d81611a3e565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b1c57611b1c611add565b604052919050565b600067ffffffffffffffff821115611b3e57611b3e611add565b50601f01601f191660200190565b6000611b5f611b5a84611b24565b611af3565b9050828152838383011115611b7357600080fd5b828260208301376000602084830101529392505050565b600082601f830112611b9b57600080fd5b61199d83833560208501611b4c565b60008060408385031215611bbd57600080fd5b823567ffffffffffffffff80821115611bd557600080fd5b611be186838701611b8a565b93506020850135915080821115611bf757600080fd5b50611c0485828601611b8a565b9150509250929050565b600080600060608486031215611c2357600080fd5b8335611c2e81611a3e565b92506020840135611c3e81611a3e565b91506040840135611c4e81611a3e565b809150509250925092565b60008060408385031215611c6c57600080fd5b8235611c7781611a3e565b915060208301358015158114611c8c57600080fd5b809150509250929050565b60008060008060808587031215611cad57600080fd5b8435611cb881611a3e565b93506020850135611cc881611a3e565b925060408501359150606085013567ffffffffffffffff811115611ceb57600080fd5b8501601f81018713611cfc57600080fd5b611d0b87823560208401611b4c565b91505092959194509250565b60008060408385031215611d2a57600080fd5b8235611d3581611a3e565b91506020830135611c8c81611a3e565b600181811c90821680611d5957607f821691505b602082108103611d7957634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215611d9157600080fd5b815161199d81611a3e565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b601f82111561062757600081815260208120601f850160051c81016020861015611e115750805b601f850160051c820191505b81811015611e3057828155600101611e1d565b505050505050565b815167ffffffffffffffff811115611e5257611e52611add565b611e6681611e608454611d45565b84611dea565b602080601f831160018114611e9b5760008415611e835750858301515b600019600386901b1c1916600185901b178555611e30565b600085815260208120601f198616915b82811015611eca57888601518255948401946001909101908401611eab565b5085821015611ee85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611f0a57600080fd5b5051919050565b60008060008060808587031215611f2757600080fd5b84519350602085015180600b0b8114611f3f57600080fd5b6040860151606090960151949790965092505050565b60008151611f678185602086016119ce565b9290920192915050565b60008551611f83818460208a016119ce565b693f666c6f77526174653d60b01b9083019081528551611faa81600a840160208a016119ce565b69266f7574676f696e673d60b01b600a92909101918201528451611fd58160148401602089016119ce565b8451910190611feb8160148401602088016119ce565b016014019695505050505050565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561202157600080fd5b815167ffffffffffffffff81111561203857600080fd5b8201601f8101841361204957600080fd5b8051612057611b5a82611b24565b81815285602083850101111561206c57600080fd5b61207d8260208301602086016119ce565b95945050505050565b60006020828403121561209857600080fd5b815160ff8116811461199d57600080fd5b6e26746f6b656e5f616464726573733d60881b8152600088516120d381600f850160208d016119ce565b6926636861696e5f69643d60b01b600f9184019182015288516120fd816019840160208d016119ce565b6d26746f6b656e5f73796d626f6c3d60901b60199290910191820152875161212c816027840160208c016119ce565b672673656e6465723d60c01b60279290910191820152865161215581602f840160208b016119ce565b692672656365697665723d60b01b602f92909101918201526121c66121c06121a86121a2612186603986018b611f55565b6f26746f6b656e5f646563696d616c733d60801b815260100190565b88611f55565b6b2673746172745f646174653d60a01b8152600c0190565b85611f55565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104e1576104e16121d4565b808201808211156104e1576104e16121d4565b634e487b7160e01b600052603260045260246000fd5b600081612239576122396121d4565b50600019019056fe68747470733a2f2f6e66742e7375706572666c7569642e66696e616e63652f6366612f76322f6765746d657461a26469706673582212205be9af8ff58edb1e7f588603a281111094984f58bd9aecae5d6537727d063ab264736f6c63430008130033",
    "sourceMap": "876:6796:89:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5582:360:90;;;;;;:::i;:::-;;:::i;:::-;;;470:14:118;;463:22;445:41;;433:2;418:18;5582:360:90;;;;;;;;6677:100;;;:::i;:::-;;;;;;;:::i;10632:181::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1502:32:118;;;1484:51;;1472:2;1457:18;10632:181:90;1338:203:118;9656:416:90;;;;;;:::i;:::-;;:::i;:::-;;1715:68;;;;;11274:309;;;;;;:::i;:::-;;:::i;5124:105::-;;;;;;:::i;:::-;;:::i;11617:181::-;;;;;;:::i;:::-;;:::i;4625:317::-;;;;;;:::i;:::-;;:::i;1839:33::-;;;;;946:55:89;;;;;4380:239:90;;;;;;:::i;:::-;;:::i;400:122:98:-;;;:::i;1616:209:89:-;1709:109;1616:209;;;5290:25:118;;;5278:2;5263:18;1616:209:89;5144:177:118;5976:259:90;;;;;;:::i;:::-;;:::i;1383:83::-;;;:::i;6391:119::-;;;;;;:::i;:::-;-1:-1:-1;6502:1:90;;6391:119;10111:212;;;;;;:::i;:::-;;:::i;2006:235:89:-;;;;;;:::i;:::-;;:::i;:::-;;;;6309:13:118;;-1:-1:-1;;;;;6305:22:118;;;6287:41;;6388:4;6376:17;;;6370:24;6366:33;;6344:20;;;6337:63;6448:17;;;6442:24;6438:33;6416:20;;;6409:63;;;;6532:4;6520:17;;;6514:24;6540:10;6510:41;6488:20;;;6481:71;;;;6236:3;6221:19;2006:235:89;6042:516:118;6929:104:90;;;:::i;731:44:98:-;;;:::i;10847:175:90:-;;;;;;:::i;:::-;;:::i;1287:89::-;;;:::i;11832:348::-;;;;;;:::i;:::-;;:::i;2247:211:89:-;;;;;;:::i;:::-;;:::i;11056:184:90:-;;;;;;:::i;:::-;;:::i;3893:474:89:-;;;;;;:::i;:::-;;:::i;4742:535::-;;;;;;:::i;:::-;;:::i;2873:633::-;;;;;;:::i;:::-;;:::i;5582:360:90:-;5683:4;-1:-1:-1;;;;;;;;;5718:25:90;;;;:100;;-1:-1:-1;;;;;;;;;;5793:25:90;;;5718:100;:175;;;-1:-1:-1;;;;;;;;;;5868:25:90;;;5718:175;5699:194;5582:360;-1:-1:-1;;5582:360:90:o;6677:100::-;6733:13;6765:5;6758:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6677:100;:::o;10632:181::-;10722:7;10741:23;10756:7;10741:14;:23::i;:::-;-1:-1:-1;10782:24:90;;;;:15;:24;;;;;;-1:-1:-1;;;;;10782:24:90;;10632:181::o;9656:416::-;9736:13;9752:28;9772:7;9752:19;:28::i;:::-;9736:44;;9800:5;-1:-1:-1;;;;;9794:11:90;:2;-1:-1:-1;;;;;9794:11:90;;9790:83;;9828:34;;-1:-1:-1;;;9828:34:90;;;;;;;;;;;9790:83;9887:10;-1:-1:-1;;;;;9887:19:90;;;;;;:59;;;9911:35;9928:5;9935:10;9911:16;:35::i;:::-;9910:36;9887:59;9883:151;;;9969:54;;-1:-1:-1;;;9969:54:90;;;;;;;;;;;9883:151;10044:21;10053:2;10057:7;10044:8;:21::i;:::-;9726:346;9656:416;;:::o;11274:309::-;11410:39;11429:10;11441:7;11410:18;:39::i;:::-;11405:133;;11472:55;;-1:-1:-1;;;11472:55:90;;;;;;;;;;;11405:133;11548:28;11558:4;11564:2;11568:7;11548:9;:28::i;5124:105::-;5191:31;5214:7;5191:22;:31::i;:::-;5124:105;:::o;11617:181::-;11752:39;11769:4;11775:2;11779:7;11752:39;;;;;;;;;;;;:16;:39::i;4625:317::-;4693:36;4732:4;-1:-1:-1;;;;;4732:25:90;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4693:66;-1:-1:-1;4773:10:90;-1:-1:-1;;;;;4773:40:90;;;4769:112;;4836:34;;-1:-1:-1;;;4836:34:90;;;;;;;;;;;4769:112;4891:44;4924:10;4891:32;:44::i;:::-;4683:259;4625:317;:::o;4380:239::-;3268:19:28;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:28;;3369:1;3354:12;;;;:16;3336:34;3335:97;;;-1:-1:-1;3404:4:28;1702:19:39;:23;;;3376:55:28;;-1:-1:-1;3414:12:28;;;;;:17;3376:55;3314:190;;;;-1:-1:-1;;;3314:190:28;;;;;;;:::i;:::-;;;;;;;;;3514:12;:16;;-1:-1:-1;;3514:16:28;3529:1;3514:16;;;3540:65;;;;3574:13;:20;;-1:-1:-1;;3574:20:28;;;;;3540:65;4568:5:90::1;:15;4576:7:::0;4568:5;:15:::1;:::i;:::-;-1:-1:-1::0;4593:7:90::1;:19;4603:9:::0;4593:7;:19:::1;:::i;:::-;;3629:14:28::0;3625:99;;;3675:5;3659:21;;-1:-1:-1;;3659:21:28;;;3699:14;;-1:-1:-1;12177:36:118;;3699:14:28;;12165:2:118;12150:18;3699:14:28;;;;;;;3258:472;4380:239:90;;:::o;400:122:98:-;447:19;489:26;751:20:100;745:27;;618:170;489:26:98;482:33;;400:122;:::o;5976:259:90:-;6062:7;5430:27:89;;;:18;:27;;;;;:38;;;-1:-1:-1;;;;;5430:38:89;;6124:83:90;;6170:26;;-1:-1:-1;;;6170:26:90;;;;;;;;;;;1383:83;1423:13;1447:16;;;;;;;;;;;;;;;;;1440:23;;1383:83;:::o;10111:212::-;10238:15;10275:41;10287:10;10299:6;10307:8;10275:11;:41::i;:::-;10265:51;10111:212;-1:-1:-1;;;;10111:212:90:o;2006:235:89:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2207:27:89;;;;:18;:27;;;;;;;;;2196:38;;;;;;;;;-1:-1:-1;;;;;2196:38:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2196:38:89;;;;;;;;;2006:235::o;6929:104:90:-;6987:13;7019:7;7012:14;;;;;:::i;731:44:98:-;3268:19:28;3291:13;;;;;;3290:14;;3336:34;;;;-1:-1:-1;3354:12:28;;3369:1;3354:12;;;;:16;3336:34;3335:97;;;-1:-1:-1;3404:4:28;1702:19:39;:23;;;3376:55:28;;-1:-1:-1;3414:12:28;;;;;:17;3376:55;3314:190;;;;-1:-1:-1;;;3314:190:28;;;;;;;:::i;:::-;3514:12;:16;;-1:-1:-1;;3514:16:28;3529:1;3514:16;;;3540:65;;;;3574:13;:20;;-1:-1:-1;;3574:20:28;;;;;3540:65;3629:14;3625:99;;;3675:5;3659:21;;-1:-1:-1;;3659:21:28;;;3699:14;;-1:-1:-1;12177:36:118;;3699:14:28;;12165:2:118;12150:18;3699:14:28;;;;;;;;3258:472;731:44:98:o;10847:175:90:-;10965:50;10984:10;10996:8;11006;10965:18;:50::i;1287:89::-;;;;;;;;;;;;;;;;;;;:::o;11832:348::-;11997:39;12016:10;12028:7;11997:18;:39::i;:::-;11992:133;;12059:55;;-1:-1:-1;;;12059:55:90;;;;;;;;;;;11992:133;12135:38;12149:4;12155:2;12159:7;12168:4;12135:13;:38::i;:::-;11832:348;;;;:::o;2247:211:89:-;2390:13;2426:25;2436:7;2445:5;2426:9;:25::i;11056:184:90:-;-1:-1:-1;;;;;11198:25:90;;;11175:4;11198:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;11056:184::o;3893:474:89:-;7540:10;-1:-1:-1;;;;;7562:26:89;7540:49;;7536:117;;7612:30;;-1:-1:-1;;;7612:30:89;;;;;;;;;;;7536:117;4050:15:::1;4068:104;4101:10;4126;4150:12;4068:11;:104::i;:::-;4236:1;4186:27:::0;;;:18:::1;:27;::::0;;;;:38:::1;;::::0;4050:122;;-1:-1:-1;;;;;;4186:38:89::1;:52:::0;4182:179:::1;;4254:31;4277:7;4254:22;:31::i;:::-;4300:50;::::0;-1:-1:-1;;;4300:50:89;;::::1;::::0;::::1;5290:25:118::0;;;4300:19:89::1;-1:-1:-1::0;;;;;4300:41:89::1;::::0;::::1;::::0;5263:18:118;;4300:50:89::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;4040:327;3893:474:::0;;;:::o;4742:535::-;7540:10;-1:-1:-1;;;;;7562:26:89;7540:49;;7536:117;;7612:30;;-1:-1:-1;;;7612:30:89;;;;;;;;;;;7536:117;4899:15:::1;4917:104;4950:10;4975;4999:12;4917:11;:104::i;:::-;5085:1;5035:27:::0;;;:18:::1;:27;::::0;;;;:38:::1;;::::0;4899:122;;-1:-1:-1;;;;;;5035:38:89::1;:52:::0;5031:240:::1;;5198:33;::::0;-1:-1:-1;;;5198:33:89;;::::1;::::0;::::1;5290:25:118::0;;;5198:19:89::1;-1:-1:-1::0;;;;;5198:24:89::1;::::0;::::1;::::0;5263:18:118;;5198:33:89::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;5246:14;5252:7;5246:5;:14::i;2873:633::-:0;7540:10;-1:-1:-1;;;;;7562:26:89;7540:49;;7536:117;;7612:30;;-1:-1:-1;;;7612:30:89;;;;;;;;;;;7536:117;3150:18:::1;3171:104;3204:10;3229;3253:12;3171:11;:104::i;:::-;3342:1;3289:30:::0;;;:18:::1;:30;::::0;;;;:41:::1;;::::0;3150:125;;-1:-1:-1;;;;;;3289:41:89::1;3285:215;;3360:64;3374:10;3387;3399:12;3413:10;3360:5;:64::i;:::-;3439:50;::::0;-1:-1:-1;;;3439:50:89;;-1:-1:-1;;;;;12416:32:118;;;3439:50:89::1;::::0;::::1;12398:51:118::0;12465:18;;;12458:34;;;3439:19:89::1;:24;::::0;::::1;::::0;12371:18:118;;3439:50:89::1;12224:274:118::0;12905:128:90;13549:4;5430:27:89;;;:18;:27;;;;;:38;;;-1:-1:-1;;;;;5430:38:89;12970:56:90;;13000:26;;-1:-1:-1;;;13000:26:90;;;;;;;;;;;13725:158;13791:24;;;;:15;:24;;;;;;;;:29;;-1:-1:-1;;;;;;13791:29:90;-1:-1:-1;;;;;13791:29:90;;;;;;;;;5430:18:89;:27;;;;;;-1:-1:-1;5430:38:89;;13836:40:90;;13791:24;;5430:38:89;;;;;13836:40:90;;;13725:158;;:::o;12476:304::-;12583:4;12599:13;12615:28;12635:7;12615:19;:28::i;:::-;12599:44;;12672:5;-1:-1:-1;;;;;12661:16:90;:7;-1:-1:-1;;;;;12661:16:90;;:64;;;;12693:32;12710:5;12717:7;12693:16;:32::i;:::-;12661:111;;;;12765:7;-1:-1:-1;;;;;12741:31:90;:20;12753:7;12741:11;:20::i;:::-;-1:-1:-1;;;;;12741:31:90;;12653:120;12476:304;-1:-1:-1;;;;12476:304:90:o;5615:186:89:-;5761:33;;-1:-1:-1;;;5761:33:89;;;;;;;;;;;13616:103:90;13689:23;;5290:25:118;;;13689:23:90;;5278:2:118;5263:18;13689:23:90;5144:177:118;1289:576:98;1457:1;1419:26;751:20:100;745:27;;618:170;1419:26:98;-1:-1:-1;;;;;1419:40:98;;1411:82;;;;-1:-1:-1;;;1411:82:98;;12705:2:118;1411:82:98;;;12687:21:118;12744:2;12724:18;;;12717:30;12783:31;12763:18;;;12756:59;12832:18;;1411:82:98;12503:353:118;1411:82:98;1557:10;-1:-1:-1;;;;;1543:39:98;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1709:109:89;1524:60:98;1503:142;;;;-1:-1:-1;;;1503:142:98;;13252:2:118;1503:142:98;;;13234:21:118;13291:2;13271:18;;;13264:30;13330:34;13310:18;;;13303:62;-1:-1:-1;;;13381:18:118;;;13374:33;13424:19;;1503:142:98;13050:399:118;1503:142:98;-1:-1:-1;;;;;1676:27:98;;1684:4;1676:27;1655:99;;;;-1:-1:-1;;;1655:99:98;;13656:2:118;1655:99:98;;;13638:21:118;13695:2;13675:18;;;13668:30;13734:27;13714:18;;;13707:55;13779:18;;1655:99:98;13454:349:118;1655:99:98;1764:39;1792:10;988:20:100;964:87;839:228;1764:39:98;1818:40;1709:109:89;1818:40:98;;;13982:25:118;;;-1:-1:-1;;;;;14043:32:118;;14038:2;14023:18;;14016:60;13955:18;1818:40:98;13808:274:118;10329:269:90;10525:55;;;10536:13;10525:55;;;;14318:25:118;;;;-1:-1:-1;;;;;14417:15:118;;;14397:18;;;14390:43;14469:15;;;14449:18;;;14442:43;14521:15;;;;14501:18;;;;14494:43;;;;10525:55:90;;;;;;;;;;14290:19:118;;;;10525:55:90;;;10515:66;;;;;;10329:269::o;13889:303::-;14027:8;-1:-1:-1;;;;;14018:17:90;:5;-1:-1:-1;;;;;14018:17:90;;14014:57;;14044:27;;-1:-1:-1;;;14044:27:90;;;;;;;;;;;14014:57;-1:-1:-1;;;;;14082:25:90;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;14082:46:90;;;;;;;;;;14144:41;;445::118;;;14144::90;;418:18:118;14144:41:90;;;;;;;13889:303;;;:::o;14956:188::-;15109:28;15119:4;15125:2;15129:7;15109:9;:28::i;7356:776::-;7460:13;7485:27;7515:26;7533:7;7515:17;:26::i;:::-;7584:19;;7707;;;;7740:21;;;;;7640:131;;-1:-1:-1;;;7640:131:90;;-1:-1:-1;;;;;14827:15:118;;;7640:131:90;;;14809:34:118;14879:15;;;14859:18;;;14852:43;14931:15;;;14911:18;;;14904:43;7584:19:90;;-1:-1:-1;7584:19:90;;7552:17;;7640:26;:34;;;;14744:18:118;;7640:131:90;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7615:156;;;;;7863:9;:7;:9::i;:::-;7928:36;7943:8;7928:25;;:34;:36::i;:::-;8020:8;:27;;;;;;;;;;;;;;;-1:-1:-1;;;8020:27:90;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8020:27:90;;;;8069:24;8085:7;8069:15;:24::i;:::-;7825:286;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7782:343;;;;;7356:776;;;;:::o;7158:332:89:-;7218:13;5430:27;;;:18;:27;;;;;;;;:38;;;;;15388:15:90;:24;;;;;15381:31;;-1:-1:-1;;;;;;15381:31:90;;;;;;7353:27:89;;;;7346:34;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;7346:34:89;;;7447:36;;-1:-1:-1;;;;;5430:38:89;;;;:27;;:38;;7447:36;;7218:13;;7447:36;7208:282;7158:332;:::o;6301:637::-;-1:-1:-1;;;;;6462:24:89;;6455:32;;;;:::i;:::-;6518:12;-1:-1:-1;;;;;6504:26:89;:10;-1:-1:-1;;;;;6504:26:89;;6497:34;;;;:::i;:::-;13549:4:90;5430:27:89;;;:18;:27;;;;;:38;;;-1:-1:-1;;;;;5430:38:89;13572:31:90;6541:28:89;;;;:::i;:::-;6664:149;;;;;;;;-1:-1:-1;;;;;6664:149:89;;;;;;;;;;;;;;;;;;;;;;;;;6770:15;6664:149;;;;;;;;-1:-1:-1;6631:30:89;;;:18;:30;;;;;;:182;;;;;;;-1:-1:-1;;;;;;6631:182:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6631:182:89;-1:-1:-1;;;;;;6631:182:89;;;;;;;;;;;;;;;;;;6887:44;;6650:10;;6664:149;-1:-1:-1;6887:44:89;;-1:-1:-1;;6887:44:89;6301:637;;;;:::o;447:696:41:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:41;-1:-1:-1;604:41:41;-1:-1:-1;765:28:41;;;781:2;765:28;820:280;-1:-1:-1;;851:5:41;-1:-1:-1;;;985:2:41;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1064:21:41;820:280;1064:21;-1:-1:-1;1120:6:41;447:696;-1:-1:-1;;;447:696:41:o;8138:1484:90:-;8217:13;8242:27;8272:26;8290:7;8272:17;:26::i;:::-;8242:56;;8597:132;8658:8;:19;;;-1:-1:-1;;;;;8642:37:90;8705:2;8597:19;:132::i;:::-;8785:24;:13;:22;:24::i;:::-;8881:8;:19;;;-1:-1:-1;;;;;8869:39:90;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8869:41:90;;;;;;;;;;;;:::i;:::-;8964:132;9025:8;:19;;;-1:-1:-1;;;;;9009:37:90;9072:2;8964:19;:132::i;:::-;9152:134;9213:8;:21;;;-1:-1:-1;;;;;9197:39:90;9262:2;9152:19;:134::i;:::-;9348:88;9368:8;:19;;;-1:-1:-1;;;;;9356:41:90;;:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9348:52;;:86;:88::i;:::-;9541:42;9549:8;:22;;;9541:31;;:40;:42::i;:::-;8520:1081;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8477:1138;;;8138:1484;;;:::o;10139:916:45:-;10192:7;;-1:-1:-1;;;10267:17:45;;10263:103;;-1:-1:-1;;;10304:17:45;;;-1:-1:-1;10349:2:45;10339:12;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;-1:-1:-1;10465:2:45;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:45;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:45;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:45;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:45;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:45:o;1818:437:41:-;1893:13;1918:19;1950:10;1954:6;1950:1;:10;:::i;:::-;:14;;1963:1;1950:14;:::i;:::-;1940:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1940:25:41;;1918:47;;-1:-1:-1;;;1975:6:41;1982:1;1975:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1975:15:41;;;;;;;;;-1:-1:-1;;;2000:6:41;2007:1;2000:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2000:15:41;;;;;;;;-1:-1:-1;2030:9:41;2042:10;2046:6;2042:1;:10;:::i;:::-;:14;;2055:1;2042:14;:::i;:::-;2030:26;;2025:128;2062:1;2058;:5;2025:128;;;-1:-1:-1;;;2105:5:41;2113:3;2105:11;2096:21;;;;;;;:::i;:::-;;;;2084:6;2091:1;2084:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2084:33:41;;;;;;;;-1:-1:-1;2141:1:41;2131:11;;;;;2065:3;;;:::i;:::-;;;2025:128;;;-1:-1:-1;2170:10:41;;2162:55;;;;-1:-1:-1;;;2162:55:41;;21370:2:118;2162:55:41;;;21352:21:118;;;21389:18;;;21382:30;21448:34;21428:18;;;21421:62;21500:18;;2162:55:41;21168:356:118;2162:55:41;2241:6;1818:437;-1:-1:-1;;;1818:437:41:o;14:286:118:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:118;;209:43;;199:71;;266:1;263;256:12;497:250;582:1;592:113;606:6;603:1;600:13;592:113;;;682:11;;;676:18;663:11;;;656:39;628:2;621:10;592:113;;;-1:-1:-1;;739:1:118;721:16;;714:27;497:250::o;752:396::-;901:2;890:9;883:21;864:4;933:6;927:13;976:6;971:2;960:9;956:18;949:34;992:79;1064:6;1059:2;1048:9;1044:18;1039:2;1031:6;1027:15;992:79;:::i;:::-;1132:2;1111:15;-1:-1:-1;;1107:29:118;1092:45;;;;1139:2;1088:54;;752:396;-1:-1:-1;;752:396:118:o;1153:180::-;1212:6;1265:2;1253:9;1244:7;1240:23;1236:32;1233:52;;;1281:1;1278;1271:12;1233:52;-1:-1:-1;1304:23:118;;1153:180;-1:-1:-1;1153:180:118:o;1546:131::-;-1:-1:-1;;;;;1621:31:118;;1611:42;;1601:70;;1667:1;1664;1657:12;1682:315;1750:6;1758;1811:2;1799:9;1790:7;1786:23;1782:32;1779:52;;;1827:1;1824;1817:12;1779:52;1866:9;1853:23;1885:31;1910:5;1885:31;:::i;:::-;1935:5;1987:2;1972:18;;;;1959:32;;-1:-1:-1;;;1682:315:118:o;2244:456::-;2321:6;2329;2337;2390:2;2378:9;2369:7;2365:23;2361:32;2358:52;;;2406:1;2403;2396:12;2358:52;2445:9;2432:23;2464:31;2489:5;2464:31;:::i;:::-;2514:5;-1:-1:-1;2571:2:118;2556:18;;2543:32;2584:33;2543:32;2584:33;:::i;:::-;2244:456;;2636:7;;-1:-1:-1;;;2690:2:118;2675:18;;;;2662:32;;2244:456::o;2705:247::-;2764:6;2817:2;2805:9;2796:7;2792:23;2788:32;2785:52;;;2833:1;2830;2823:12;2785:52;2872:9;2859:23;2891:31;2916:5;2891:31;:::i;3422:127::-;3483:10;3478:3;3474:20;3471:1;3464:31;3514:4;3511:1;3504:15;3538:4;3535:1;3528:15;3554:275;3625:2;3619:9;3690:2;3671:13;;-1:-1:-1;;3667:27:118;3655:40;;3725:18;3710:34;;3746:22;;;3707:62;3704:88;;;3772:18;;:::i;:::-;3808:2;3801:22;3554:275;;-1:-1:-1;3554:275:118:o;3834:187::-;3883:4;3916:18;3908:6;3905:30;3902:56;;;3938:18;;:::i;:::-;-1:-1:-1;4004:2:118;3983:15;-1:-1:-1;;3979:29:118;4010:4;3975:40;;3834:187::o;4026:338::-;4091:5;4120:53;4136:36;4165:6;4136:36;:::i;:::-;4120:53;:::i;:::-;4111:62;;4196:6;4189:5;4182:21;4236:3;4227:6;4222:3;4218:16;4215:25;4212:45;;;4253:1;4250;4243:12;4212:45;4302:6;4297:3;4290:4;4283:5;4279:16;4266:43;4356:1;4349:4;4340:6;4333:5;4329:18;4325:29;4318:40;4026:338;;;;;:::o;4369:222::-;4412:5;4465:3;4458:4;4450:6;4446:17;4442:27;4432:55;;4483:1;4480;4473:12;4432:55;4505:80;4581:3;4572:6;4559:20;4552:4;4544:6;4540:17;4505:80;:::i;4596:543::-;4684:6;4692;4745:2;4733:9;4724:7;4720:23;4716:32;4713:52;;;4761:1;4758;4751:12;4713:52;4801:9;4788:23;4830:18;4871:2;4863:6;4860:14;4857:34;;;4887:1;4884;4877:12;4857:34;4910:50;4952:7;4943:6;4932:9;4928:22;4910:50;:::i;:::-;4900:60;;5013:2;5002:9;4998:18;4985:32;4969:48;;5042:2;5032:8;5029:16;5026:36;;;5058:1;5055;5048:12;5026:36;;5081:52;5125:7;5114:8;5103:9;5099:24;5081:52;:::i;:::-;5071:62;;;4596:543;;;;;:::o;5508:529::-;5585:6;5593;5601;5654:2;5642:9;5633:7;5629:23;5625:32;5622:52;;;5670:1;5667;5660:12;5622:52;5709:9;5696:23;5728:31;5753:5;5728:31;:::i;:::-;5778:5;-1:-1:-1;5835:2:118;5820:18;;5807:32;5848:33;5807:32;5848:33;:::i;:::-;5900:7;-1:-1:-1;5959:2:118;5944:18;;5931:32;5972:33;5931:32;5972:33;:::i;:::-;6024:7;6014:17;;;5508:529;;;;;:::o;6563:416::-;6628:6;6636;6689:2;6677:9;6668:7;6664:23;6660:32;6657:52;;;6705:1;6702;6695:12;6657:52;6744:9;6731:23;6763:31;6788:5;6763:31;:::i;:::-;6813:5;-1:-1:-1;6870:2:118;6855:18;;6842:32;6912:15;;6905:23;6893:36;;6883:64;;6943:1;6940;6933:12;6883:64;6966:7;6956:17;;;6563:416;;;;;:::o;6984:795::-;7079:6;7087;7095;7103;7156:3;7144:9;7135:7;7131:23;7127:33;7124:53;;;7173:1;7170;7163:12;7124:53;7212:9;7199:23;7231:31;7256:5;7231:31;:::i;:::-;7281:5;-1:-1:-1;7338:2:118;7323:18;;7310:32;7351:33;7310:32;7351:33;:::i;:::-;7403:7;-1:-1:-1;7457:2:118;7442:18;;7429:32;;-1:-1:-1;7512:2:118;7497:18;;7484:32;7539:18;7528:30;;7525:50;;;7571:1;7568;7561:12;7525:50;7594:22;;7647:4;7639:13;;7635:27;-1:-1:-1;7625:55:118;;7676:1;7673;7666:12;7625:55;7699:74;7765:7;7760:2;7747:16;7742:2;7738;7734:11;7699:74;:::i;:::-;7689:84;;;6984:795;;;;;;;:::o;7784:388::-;7852:6;7860;7913:2;7901:9;7892:7;7888:23;7884:32;7881:52;;;7929:1;7926;7919:12;7881:52;7968:9;7955:23;7987:31;8012:5;7987:31;:::i;:::-;8037:5;-1:-1:-1;8094:2:118;8079:18;;8066:32;8107:33;8066:32;8107:33;:::i;8737:380::-;8816:1;8812:12;;;;8859;;;8880:61;;8934:4;8926:6;8922:17;8912:27;;8880:61;8987:2;8979:6;8976:14;8956:18;8953:38;8950:161;;9033:10;9028:3;9024:20;9021:1;9014:31;9068:4;9065:1;9058:15;9096:4;9093:1;9086:15;8950:161;;8737:380;;;:::o;9122:279::-;9220:6;9273:2;9261:9;9252:7;9248:23;9244:32;9241:52;;;9289:1;9286;9279:12;9241:52;9321:9;9315:16;9340:31;9365:5;9340:31;:::i;9406:410::-;9608:2;9590:21;;;9647:2;9627:18;;;9620:30;9686:34;9681:2;9666:18;;9659:62;-1:-1:-1;;;9752:2:118;9737:18;;9730:44;9806:3;9791:19;;9406:410::o;9947:545::-;10049:2;10044:3;10041:11;10038:448;;;10085:1;10110:5;10106:2;10099:17;10155:4;10151:2;10141:19;10225:2;10213:10;10209:19;10206:1;10202:27;10196:4;10192:38;10261:4;10249:10;10246:20;10243:47;;;-1:-1:-1;10284:4:118;10243:47;10339:2;10334:3;10330:12;10327:1;10323:20;10317:4;10313:31;10303:41;;10394:82;10412:2;10405:5;10402:13;10394:82;;;10457:17;;;10438:1;10427:13;10394:82;;;10398:3;;;9947:545;;;:::o;10668:1352::-;10794:3;10788:10;10821:18;10813:6;10810:30;10807:56;;;10843:18;;:::i;:::-;10872:97;10962:6;10922:38;10954:4;10948:11;10922:38;:::i;:::-;10916:4;10872:97;:::i;:::-;11024:4;;11088:2;11077:14;;11105:1;11100:663;;;;11807:1;11824:6;11821:89;;;-1:-1:-1;11876:19:118;;;11870:26;11821:89;-1:-1:-1;;10625:1:118;10621:11;;;10617:24;10613:29;10603:40;10649:1;10645:11;;;10600:57;11923:81;;11070:944;;11100:663;9894:1;9887:14;;;9931:4;9918:18;;-1:-1:-1;;11136:20:118;;;11254:236;11268:7;11265:1;11262:14;11254:236;;;11357:19;;;11351:26;11336:42;;11449:27;;;;11417:1;11405:14;;;;11284:19;;11254:236;;;11258:3;11518:6;11509:7;11506:19;11503:201;;;11579:19;;;11573:26;-1:-1:-1;;11662:1:118;11658:14;;;11674:3;11654:24;11650:37;11646:42;11631:58;11616:74;;11503:201;-1:-1:-1;;;;;11750:1:118;11734:14;;;11730:22;11717:36;;-1:-1:-1;10668:1352:118:o;12861:184::-;12931:6;12984:2;12972:9;12963:7;12959:23;12955:32;12952:52;;;13000:1;12997;12990:12;12952:52;-1:-1:-1;13023:16:118;;12861:184;-1:-1:-1;12861:184:118:o;14958:462::-;15053:6;15061;15069;15077;15130:3;15118:9;15109:7;15105:23;15101:33;15098:53;;;15147:1;15144;15137:12;15098:53;15176:9;15170:16;15160:26;;15229:2;15218:9;15214:18;15208:25;15277:5;15273:2;15262:21;15255:5;15252:32;15242:60;;15298:1;15295;15288:12;15242:60;15366:2;15351:18;;15345:25;15410:2;15395:18;;;15389:25;14958:462;;15321:5;;-1:-1:-1;14958:462:118;-1:-1:-1;;;14958:462:118:o;15425:198::-;15467:3;15505:5;15499:12;15520:65;15578:6;15573:3;15566:4;15559:5;15555:16;15520:65;:::i;:::-;15601:16;;;;;15425:198;-1:-1:-1;;15425:198:118:o;15628:1208::-;16105:3;16143:6;16137:13;16159:66;16218:6;16213:3;16206:4;16198:6;16194:17;16159:66;:::i;:::-;-1:-1:-1;;;16247:16:118;;;16272:27;;;16324:13;;16346:79;16324:13;16411:2;16400:14;;16393:4;16381:17;;16346:79;:::i;:::-;-1:-1:-1;;;16488:2:118;16444:20;;;;16480:11;;;16473:33;16531:13;;16553:76;16531:13;16615:2;16607:11;;16600:4;16588:17;;16553:76;:::i;:::-;16690:13;;16648:17;;;16712:76;16690:13;16774:2;16766:11;;16759:4;16747:17;;16712:76;:::i;:::-;16808:17;16827:2;16804:26;;15628:1208;-1:-1:-1;;;;;;15628:1208:118:o;16841:127::-;16902:10;16897:3;16893:20;16890:1;16883:31;16933:4;16930:1;16923:15;16957:4;16954:1;16947:15;17105:649;17185:6;17238:2;17226:9;17217:7;17213:23;17209:32;17206:52;;;17254:1;17251;17244:12;17206:52;17287:9;17281:16;17320:18;17312:6;17309:30;17306:50;;;17352:1;17349;17342:12;17306:50;17375:22;;17428:4;17420:13;;17416:27;-1:-1:-1;17406:55:118;;17457:1;17454;17447:12;17406:55;17486:2;17480:9;17511:49;17527:32;17556:2;17527:32;:::i;17511:49::-;17583:2;17576:5;17569:17;17623:7;17618:2;17613;17609;17605:11;17601:20;17598:33;17595:53;;;17644:1;17641;17634:12;17595:53;17657:67;17721:2;17716;17709:5;17705:14;17700:2;17696;17692:11;17657:67;:::i;:::-;17743:5;17105:649;-1:-1:-1;;;;;17105:649:118:o;17759:273::-;17827:6;17880:2;17868:9;17859:7;17855:23;17851:32;17848:52;;;17896:1;17893;17886:12;17848:52;17928:9;17922:16;17978:4;17971:5;17967:16;17960:5;17957:27;17947:55;;17998:1;17995;17988:12;18303:2152;-1:-1:-1;;;19454:3:118;19447:30;19429:3;19506:6;19500:13;19522:75;19590:6;19585:2;19580:3;19576:12;19569:4;19561:6;19557:17;19522:75;:::i;:::-;-1:-1:-1;;;19656:2:118;19616:16;;;19648:11;;;19641:33;19699:13;;19721:76;19699:13;19783:2;19775:11;;19768:4;19756:17;;19721:76;:::i;:::-;-1:-1:-1;;;19857:2:118;19816:17;;;;19849:11;;;19842:37;19904:13;;19926:76;19904:13;19988:2;19980:11;;19973:4;19961:17;;19926:76;:::i;:::-;-1:-1:-1;;;20062:2:118;20021:17;;;;20054:11;;;20047:31;20103:13;;20125:76;20103:13;20187:2;20179:11;;20172:4;20160:17;;20125:76;:::i;:::-;-1:-1:-1;;;20261:2:118;20220:17;;;;20253:11;;;20246:33;20295:154;20321:127;20351:96;20377:69;20407:38;20441:2;20433:11;;20425:6;20407:38;:::i;:::-;-1:-1:-1;;;18102:31:118;;18158:2;18149:12;;18037:130;20377:69;20369:6;20351:96;:::i;:::-;-1:-1:-1;;;18237:27:118;;18289:2;18280:12;;18172:126;20321:127;20313:6;20295:154;:::i;:::-;20288:161;18303:2152;-1:-1:-1;;;;;;;;;;18303:2152:118:o;20460:127::-;20521:10;20516:3;20512:20;20509:1;20502:31;20552:4;20549:1;20542:15;20576:4;20573:1;20566:15;20592:168;20665:9;;;20696;;20713:15;;;20707:22;;20693:37;20683:71;;20734:18;;:::i;20765:125::-;20830:9;;;20851:10;;;20848:36;;;20864:18;;:::i;20895:127::-;20956:10;20951:3;20947:20;20944:1;20937:31;20987:4;20984:1;20977:15;21011:4;21008:1;21001:15;21027:136;21066:3;21094:5;21084:39;;21103:18;;:::i;:::-;-1:-1:-1;;;21139:18:118;;21027:136::o",
    "linkReferences": {},
    "immutableReferences": {
      "69468": [
        {
          "start": 752,
          "length": 32
        },
        {
          "start": 2889,
          "length": 32
        },
        {
          "start": 3139,
          "length": 32
        },
        {
          "start": 3418,
          "length": 32
        }
      ],
      "69861": [
        {
          "start": 598,
          "length": 32
        },
        {
          "start": 2748,
          "length": 32
        },
        {
          "start": 3007,
          "length": 32
        },
        {
          "start": 3259,
          "length": 32
        },
        {
          "start": 4690,
          "length": 32
        }
      ],
      "69865": [
        {
          "start": 713,
          "length": 32
        },
        {
          "start": 1673,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "CONSTANT_FLOW_AGREEMENT_V1()": "18156101",
    "CONSTANT_INFLOW_NFT()": "4c5c0c85",
    "DEFAULT_BASE_URI()": "a497325b",
    "HOST()": "49f289dc",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "baseURI()": "6c0360eb",
    "castrate()": "9903ad38",
    "flowDataByTokenId(uint256)": "8d47859e",
    "getApproved(uint256)": "081812fc",
    "getCodeAddress()": "50d75d25",
    "getTokenId(address,address,address)": "89f71d2d",
    "initialize(string,string)": "4cd88b76",
    "isApprovedForAll(address,address)": "e985e9c5",
    "name()": "06fdde03",
    "onCreate(address,address,address)": "f7e3d983",
    "onDelete(address,address,address)": "ef1f0237",
    "onUpdate(address,address,address)": "eb54a7ca",
    "ownerOf(uint256)": "6352211e",
    "proxiableUUID()": "52d1902d",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "triggerMetadataUpdate(uint256)": "2f388560",
    "updateCode(address)": "46951954"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"constantInflowNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CALLER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_APPROVE_TO_CURRENT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_INVALID_TOKEN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_ONLY_SUPER_TOKEN_FACTORY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_IS_NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CFA_NFT_TRANSFER_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_INVALID_SUPER_TOKEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_MINT_TO_ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_CONSTANT_INFLOW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_ONLY_FLOW_AGREEMENTS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COF_NFT_TOKEN_ALREADY_EXISTS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"name\":\"CodeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONSTANT_FLOW_AGREEMENT_V1\",\"outputs\":[{\"internalType\":\"contract IConstantFlowAgreementV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONSTANT_INFLOW_NFT\",\"outputs\":[{\"internalType\":\"contract IConstantInflowNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_BASE_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOST\",\"outputs\":[{\"internalType\":\"contract ISuperfluid\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"castrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"flowDataByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"flowStartDate\",\"type\":\"uint32\"}],\"internalType\":\"struct IFlowNFTBase.FlowNFTData\",\"name\":\"flowData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onCreate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onDelete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISuperfluidToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"flowReceiver\",\"type\":\"address\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"triggerMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Superfluid\",\"details\":\"This contract uses mint/burn interface for flow creation/deletion and holds the actual storage for both NFTs.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event comes from https://eips.ethereum.org/EIPS/eip-4906\",\"params\":{\"tokenId\":\"the id of the token that should have its metadata updated\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"We always return 1 to avoid the need for additional mapping\",\"returns\":{\"balance\":\"= 1\"}},\"flowDataByTokenId(uint256)\":{\"params\":{\"tokenId\":\"the token id\"},\"returns\":{\"flowData\":\"the flow data associated with `tokenId`\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getCodeAddress()\":{\"details\":\"Get current implementation code address.\"},\"getTokenId(address,address,address)\":{\"details\":\"tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))\",\"params\":{\"flowReceiver\":\"the flow receiver\",\"flowSender\":\"the flow sender\",\"superToken\":\"the super token\"},\"returns\":{\"tokenId\":\"the tokenId\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Should follow the naming convention: TOKENx Constant Outflow/Inflow NFT\",\"returns\":{\"_0\":\"name of the NFT\"}},\"onCreate(address,address,address)\":{\"details\":\"This function mints the COF NFT to the flow sender and mints the CIF NFT to the flow receiver\",\"params\":{\"flowReceiver\":\"the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook\",\"flowSender\":\"the flow sender\",\"superToken\":\"the SuperToken contract address\"}},\"onDelete(address,address,address)\":{\"details\":\"This function burns the COF NFT and burns the CIF NFT\",\"params\":{\"flowReceiver\":\"the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook\",\"flowSender\":\"the flow sender\",\"superToken\":\"the SuperToken contract address\"}},\"onUpdate(address,address,address)\":{\"details\":\"This function triggers the metadata update of both COF and CIF NFTs\",\"params\":{\"flowReceiver\":\"the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook\",\"flowSender\":\"the flow sender\",\"superToken\":\"the SuperToken contract address\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"proxiableUUID()\":{\"details\":\"Proxiable UUID marker function, this would help to avoid wrong logic      contract to be used for upgrading. NOTE: The semantics of the UUID deviates from the actual UUPS standard,       where it is equivalent of _IMPLEMENTATION_SLOT.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"This is part of the Standard Interface Detection EIP: https://eips.ethereum.org/EIPS/eip-165\",\"params\":{\"interfaceId\":\"the XOR of all function selectors in the interface\"},\"returns\":{\"_0\":\"boolean true if the interface is supported\"}},\"symbol()\":{\"details\":\"Should follow the naming convention: TOKENx(COF/CIF)\",\"returns\":{\"_0\":\"symbol of the NFT\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"triggerMetadataUpdate(uint256)\":{\"details\":\"Callable by anyone.\",\"params\":{\"tokenId\":\"the token id to trigger a metaupdate for\"}}},\"stateVariables\":{\"_flowDataByTokenId\":{\"details\":\"The token id is uint256(keccak256(abi.encode(flowSender, flowReceiver)))\"}},\"title\":\"ConstantOutflowNFT contract (COF NFT)\",\"version\":1},\"userdoc\":{\"events\":{\"MetadataUpdate(uint256)\":{\"notice\":\"Informs third-party platforms that NFT metadata should be updated\"}},\"kind\":\"user\",\"methods\":{\"CONSTANT_FLOW_AGREEMENT_V1()\":{\"notice\":\"ConstantFlowAgreementV1 contract address\"},\"HOST()\":{\"notice\":\"Superfluid host contract address\"},\"balanceOf(address)\":{\"notice\":\"Returns a hardcoded balance of 1\"},\"flowDataByTokenId(uint256)\":{\"notice\":\"An external function for querying flow data by `tokenId``\"},\"getTokenId(address,address,address)\":{\"notice\":\"An external function for computing the deterministic tokenId\"},\"name()\":{\"notice\":\"Returns the name of the NFT\"},\"onCreate(address,address,address)\":{\"notice\":\"Hook called by CFA contract on flow creation\"},\"onDelete(address,address,address)\":{\"notice\":\"Hook called by CFA contract on flow deletion\"},\"onUpdate(address,address,address)\":{\"notice\":\"Hook called by CFA contract on flow update\"},\"supportsInterface(bytes4)\":{\"notice\":\"This contract supports IERC165, IERC721 and IERC721Metadata\"},\"symbol()\":{\"notice\":\"Returns the symbol of the NFT\"},\"triggerMetadataUpdate(uint256)\":{\"notice\":\"Emits the MetadataUpdate event with `tokenId` as the argument.\"}},\"notice\":\"The ConstantOutflowNFT contract to be minted to the flow sender on flow creation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol\":\"ConstantOutflowNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@superfluid-finance/custom-supertokens/=lib/custom-supertokens/\",\":@superfluid-finance/ethereum-contracts/=lib/superfluid-protocol-monorepo/packages/ethereum-contracts/\",\":custom-supertokens/=lib/custom-supertokens/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":superfluid-protocol-monorepo/=lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed\",\"dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"lib/openzeppelin-contracts/contracts/token/ERC777/IERC777.sol\":{\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432\",\"dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"keccak256\":\"0x26f6828c29d0a4f58d9427dabcb0ad6c0ab2e3e8b2ce97bf25846cff740a8968\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8df911f06289aa9d6f6357546a70085906696932ff0dc3a4858fc0dcb1761590\",\"dweb:/ipfs/QmNkkyVSWpLGizWgUVhVUf9yyw4QWqsrGRnuQz2VNBU4yq\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol\":{\"keccak256\":\"0xac0ea75673feea931d1129ffff440390a0dd3a8f8cfa60fdb1481342652dc348\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a08777cd6701548c08f1f55d0ce86e0773a80ef28613852cd2f0552a2a24a387\",\"dweb:/ipfs/QmTgWcQE6mNs3MLUCgqtnsC5UfYYQ9x3gsjXpvJdSe2WJg\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"keccak256\":\"0xdb22b7d9ef9c3bcf5b5ec64b965d371ed0fa8493486d45e5cb7f52718baec7d8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e7500dd7267f2ebc509eb0bf7ed0a2316e44038ab60c0f4b9e1d9820c81e448\",\"dweb:/ipfs/QmaFZMARdPTQZwWmmXecdRTnqJopxF9qbt49ebZ9HJP9k2\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol\":{\"keccak256\":\"0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839\",\"dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol\":{\"keccak256\":\"0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42\",\"dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol\":{\"keccak256\":\"0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d\",\"dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol\":{\"keccak256\":\"0xa821859afd2405819b70daa367c47fc08d71b4d601effc527542862068a07403\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4596c30e866fdcabd672824dbee8cd6c24e516aa005c8d41057c686ff18c0c8\",\"dweb:/ipfs/QmSybbMVYYwWR6BVSoLwtk6YvYzts3HXZqxBYQpxKxPgCs\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol\":{\"keccak256\":\"0xba6dc0dcbd8be4a96ab5f25f90977b7c71aa1eb15df1d6835ebe2b4bb46a3045\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04a7a6e769361c9cfe38751c7dede99807c5c54f50f48c1ac929bb9f5a47fd19\",\"dweb:/ipfs/QmTTAp6LoQJC2N3Ko6HKWSr55iHijRBeUAoBxpri2Uw4jr\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"keccak256\":\"0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06\",\"dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"keccak256\":\"0x9a1cbf6d6037aac2381e8e66a2ad89e9afe6f89b290c21cb587ff6b06d137ee2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc53d92d863ef2eb577b59d3c4310dc170590df95d7b7455044ce3a05329a826\",\"dweb:/ipfs/QmbEuVbV83R73w3o4CgsALUWVUitodjTUKVydK8cXSRCBk\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"keccak256\":\"0xa8a3d0d97b11244bb58331dc53b8152c03337b5e7907182b15bcfcfae355cdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91758fd68a25655981be1737b232b5a7bf912ed32dfa7d6c71ebe79e07a364a3\",\"dweb:/ipfs/QmPH1ZMeuFvUL3hXt6xaNfH6aUHNFASECzQM2uFtmcrBon\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"keccak256\":\"0xbfc7fbef20c707e64adabe969ea6db4d6c26a56155961a8bf46b7e55a16a046d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://355aaac71bd3ebb260d6e6a9d35f07029a6f189a5d93c23f0dfec800630ed4c0\",\"dweb:/ipfs/QmXbE4rDRjTtVoxgDjVcJtxxdmK3WZ1ZEyG8iDMcn2mtfL\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"keccak256\":\"0x6bf8494d93a4fc67d67b4a26ea9885707014f2123acd53d7cd0fd99987e30096\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://93e39b9f3b7911fbe3ac17ff8872632f35b42769f9e98d39eeee98bab4be6ae7\",\"dweb:/ipfs/QmaCVVoVWa67HwrQpRK9sAtLbPjxcmnkYVbSbWUNvPuTXn\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"keccak256\":\"0xb9328d0977bd022c6771e679518c3d2bfcb6e29b400d2506813bb3cdab772bb4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bbae7172f9ca6c0c8080bdb53cfdff158142413bc21c99508988037d0d99b258\",\"dweb:/ipfs/QmVGzmQivV2dXA1Wuj2jEP6pM1MqGY6qtHtJ1J3cqcfoBK\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"keccak256\":\"0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1\",\"dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"keccak256\":\"0x479247ae4308ea9f5b50ff2bdae1299e91153a2c391a60e5d77cb3c980e527b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://649630108e202474391d729bdc76b2d928f5569bd5922e32332430bea4086725\",\"dweb:/ipfs/QmTozaRLwTWA7rXnyadKg423sojN7xVvidwJtrPdKcYTfU\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/tokens/ISETH.sol\":{\"keccak256\":\"0x9857ab20198ca28d75afcf2f6843a23a1052bf2199a308392f8e2d8a63914cbc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8321dcd14869cfb65ed07c2de950f04cf79c1d0392cb2b820f0e76e2b344d1bb\",\"dweb:/ipfs/QmRbDDTwGUkpNnSNgiugGU7r4jJLTkgAFqQfRyd3zkEBXT\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"keccak256\":\"0x5adaf0dcec7b8f91b9958c013fc3109f7b8b0efcd30391dc2bc1d98e0d406c0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dcdd83f10ee1b771e8423a387cad5a1fa325c2f6f37be44dba7d45975eb6b22\",\"dweb:/ipfs/QmNhGMNgexsrxJbmGzq7ry3555t77eCgjNjeDWMD46vQrG\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol\":{\"keccak256\":\"0xa669328bd9f0718bd65500e76a6f91bd1d59dd2eb532a06c47d3a2d463653c1e\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://8f41fd65689a2a49d1f271d6f1e70dd89560ff8b3ae2a9c2c0286b35a7919fe4\",\"dweb:/ipfs/QmV2sb4NWshVop8KarbVcqbxFiyb8kDgbAaejTXPpRdjZu\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/FlowNFTBase.sol\":{\"keccak256\":\"0x84a0beb06890d7b278943493bc4e960b84482d4e2850739b2f43a4b33815498f\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://c244d35343f22955f3184b522d4b7f8975964939d394b8f88a7673ee195d1baa\",\"dweb:/ipfs/QmedA3kyPDKetqAXXeszi9w7Ymc38VgMNajL5aw3xLWiTK\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol\":{\"keccak256\":\"0x5727ab9e11a1d76b9bde364a4239b9401d8afff8c9a6f7a9bc822b5413d0cf7a\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://6bd4990aa1eb94065fcca64dc94b3493729d7407ed834106ac44c5ad25fa6953\",\"dweb:/ipfs/QmSeU3GAYTJA948HjygmpmJ1avRwGg5zJQXsGWeYrow4sp\"]},\"lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/upgradability/UUPSUtils.sol\":{\"keccak256\":\"0x507b0157775ffc422aee1010ab640f019dc8d653e88db6ef3c57c6486f593dc6\",\"license\":\"AGPLv3\",\"urls\":[\"bzz-raw://a9b9c00cf8285e748baca7e61f29313965ea77342c50c31f426cd8af4b0be238\",\"dweb:/ipfs/QmWg34M9kVrXLBpwPguoyr178oZabaqRQogJebTLJp98ud\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluid",
              "name": "host",
              "type": "address"
            },
            {
              "internalType": "contract IConstantInflowNFT",
              "name": "constantInflowNFT",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_APPROVE_TO_CALLER"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_APPROVE_TO_CURRENT_OWNER"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_INVALID_TOKEN_ID"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_ONLY_SUPER_TOKEN_FACTORY"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CFA_NFT_TRANSFER_TO_ZERO_ADDRESS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_INVALID_SUPER_TOKEN"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_MINT_TO_ZERO_ADDRESS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_ONLY_CONSTANT_INFLOW"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_ONLY_FLOW_AGREEMENTS"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "COF_NFT_TOKEN_ALREADY_EXISTS"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "uuid",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "codeAddress",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CodeUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CONSTANT_FLOW_AGREEMENT_V1",
          "outputs": [
            {
              "internalType": "contract IConstantFlowAgreementV1",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CONSTANT_INFLOW_NFT",
          "outputs": [
            {
              "internalType": "contract IConstantInflowNFT",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DEFAULT_BASE_URI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "HOST",
          "outputs": [
            {
              "internalType": "contract ISuperfluid",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "baseURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "castrate"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "flowDataByTokenId",
          "outputs": [
            {
              "internalType": "struct IFlowNFTBase.FlowNFTData",
              "name": "flowData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "superToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "flowSender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "flowReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "flowStartDate",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getCodeAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "codeAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTokenId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "nftName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nftSymbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluidToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onCreate"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluidToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onDelete"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISuperfluidToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowSender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "flowReceiver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "onUpdate"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "proxiableUUID",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "triggerMetadataUpdate"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateCode"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
          },
          "balanceOf(address)": {
            "details": "We always return 1 to avoid the need for additional mapping",
            "returns": {
              "balance": "= 1"
            }
          },
          "flowDataByTokenId(uint256)": {
            "params": {
              "tokenId": "the token id"
            },
            "returns": {
              "flowData": "the flow data associated with `tokenId`"
            }
          },
          "getApproved(uint256)": {
            "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "getCodeAddress()": {
            "details": "Get current implementation code address."
          },
          "getTokenId(address,address,address)": {
            "details": "tokenId = uint256(keccak256(abi.encode(block.chainId, superToken, flowSender, flowReceiver)))",
            "params": {
              "flowReceiver": "the flow receiver",
              "flowSender": "the flow sender",
              "superToken": "the super token"
            },
            "returns": {
              "tokenId": "the tokenId"
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
          },
          "name()": {
            "details": "Should follow the naming convention: TOKENx Constant Outflow/Inflow NFT",
            "returns": {
              "_0": "name of the NFT"
            }
          },
          "onCreate(address,address,address)": {
            "details": "This function mints the COF NFT to the flow sender and mints the CIF NFT to the flow receiver",
            "params": {
              "flowReceiver": "the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook",
              "flowSender": "the flow sender",
              "superToken": "the SuperToken contract address"
            }
          },
          "onDelete(address,address,address)": {
            "details": "This function burns the COF NFT and burns the CIF NFT",
            "params": {
              "flowReceiver": "the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook",
              "flowSender": "the flow sender",
              "superToken": "the SuperToken contract address"
            }
          },
          "onUpdate(address,address,address)": {
            "details": "This function triggers the metadata update of both COF and CIF NFTs",
            "params": {
              "flowReceiver": "the flow receiver NOTE: We do an existence check in here to determine whether or not to execute the hook",
              "flowSender": "the flow sender",
              "superToken": "the SuperToken contract address"
            }
          },
          "ownerOf(uint256)": {
            "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
          },
          "proxiableUUID()": {
            "details": "Proxiable UUID marker function, this would help to avoid wrong logic      contract to be used for upgrading. NOTE: The semantics of the UUID deviates from the actual UUPS standard,       where it is equivalent of _IMPLEMENTATION_SLOT."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
          },
          "setApprovalForAll(address,bool)": {
            "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
          },
          "supportsInterface(bytes4)": {
            "details": "This is part of the Standard Interface Detection EIP: https://eips.ethereum.org/EIPS/eip-165",
            "params": {
              "interfaceId": "the XOR of all function selectors in the interface"
            },
            "returns": {
              "_0": "boolean true if the interface is supported"
            }
          },
          "symbol()": {
            "details": "Should follow the naming convention: TOKENx(COF/CIF)",
            "returns": {
              "_0": "symbol of the NFT"
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
          },
          "triggerMetadataUpdate(uint256)": {
            "details": "Callable by anyone.",
            "params": {
              "tokenId": "the token id to trigger a metaupdate for"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "CONSTANT_FLOW_AGREEMENT_V1()": {
            "notice": "ConstantFlowAgreementV1 contract address"
          },
          "HOST()": {
            "notice": "Superfluid host contract address"
          },
          "balanceOf(address)": {
            "notice": "Returns a hardcoded balance of 1"
          },
          "flowDataByTokenId(uint256)": {
            "notice": "An external function for querying flow data by `tokenId``"
          },
          "getTokenId(address,address,address)": {
            "notice": "An external function for computing the deterministic tokenId"
          },
          "name()": {
            "notice": "Returns the name of the NFT"
          },
          "onCreate(address,address,address)": {
            "notice": "Hook called by CFA contract on flow creation"
          },
          "onDelete(address,address,address)": {
            "notice": "Hook called by CFA contract on flow deletion"
          },
          "onUpdate(address,address,address)": {
            "notice": "Hook called by CFA contract on flow update"
          },
          "supportsInterface(bytes4)": {
            "notice": "This contract supports IERC165, IERC721 and IERC721Metadata"
          },
          "symbol()": {
            "notice": "Returns the symbol of the NFT"
          },
          "triggerMetadataUpdate(uint256)": {
            "notice": "Emits the MetadataUpdate event with `tokenId` as the argument."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/openzeppelin-contracts/",
        ":@superfluid-finance/custom-supertokens/=lib/custom-supertokens/",
        ":@superfluid-finance/ethereum-contracts/=lib/superfluid-protocol-monorepo/packages/ethereum-contracts/",
        ":custom-supertokens/=lib/custom-supertokens/contracts/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":openzeppelin/=lib/openzeppelin-contracts/contracts/",
        ":superfluid-protocol-monorepo/=lib/superfluid-protocol-monorepo/packages/solidity-semantic-money/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol": "ConstantOutflowNFT"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6",
        "urls": [
          "bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed",
          "dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC777/IERC777.sol": {
        "keccak256": "0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03",
        "urls": [
          "bzz-raw://2570d04d0b74df414fa33f9f7da6442419a07909ece7baeecd7147d9c7d6a432",
          "dweb:/ipfs/QmRDQM1kzddwCk8ateQgnogu495fWb4L9Xwr42DAQhHzi5"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [
          "bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
          "dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
        "urls": [
          "bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
          "dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
        "urls": [
          "bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
          "dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
        "urls": [
          "bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
          "dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
        "keccak256": "0x26f6828c29d0a4f58d9427dabcb0ad6c0ab2e3e8b2ce97bf25846cff740a8968",
        "urls": [
          "bzz-raw://8df911f06289aa9d6f6357546a70085906696932ff0dc3a4858fc0dcb1761590",
          "dweb:/ipfs/QmNkkyVSWpLGizWgUVhVUf9yyw4QWqsrGRnuQz2VNBU4yq"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/agreements/IInstantDistributionAgreementV1.sol": {
        "keccak256": "0xac0ea75673feea931d1129ffff440390a0dd3a8f8cfa60fdb1481342652dc348",
        "urls": [
          "bzz-raw://a08777cd6701548c08f1f55d0ce86e0773a80ef28613852cd2f0552a2a24a387",
          "dweb:/ipfs/QmTgWcQE6mNs3MLUCgqtnsC5UfYYQ9x3gsjXpvJdSe2WJg"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
        "keccak256": "0xdb22b7d9ef9c3bcf5b5ec64b965d371ed0fa8493486d45e5cb7f52718baec7d8",
        "urls": [
          "bzz-raw://1e7500dd7267f2ebc509eb0bf7ed0a2316e44038ab60c0f4b9e1d9820c81e448",
          "dweb:/ipfs/QmaFZMARdPTQZwWmmXecdRTnqJopxF9qbt49ebZ9HJP9k2"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol": {
        "keccak256": "0xb219bf31e236fe6c2968ecf0f6c3eb24cb6774aaf4fcc83252e9b06bba718f33",
        "urls": [
          "bzz-raw://c09b0ffff8630ba6a86cdcd17f1ac65f8ba4e5b296e0320d945943e156fdf839",
          "dweb:/ipfs/QmPkBBJBYyYg1xxM4wRKdEpGK3b1beYeKoM6THzYb3qjM7"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol": {
        "keccak256": "0x15799c1552fa7aad4c1a7197451cd02422a6c768b236ab2904e72f7158a4a2c2",
        "urls": [
          "bzz-raw://c62bb88c0c43ad162c8c226aede16a75c352738aaaf6794fa0c2881dcf59ad42",
          "dweb:/ipfs/QmeWQdFDvzbN8JrCRSRRnZEuw5EbWVzRLM2duhJ515QUXK"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IFlowNFTBase.sol": {
        "keccak256": "0xa1600ee907288d7852678cc43f995498a039710a4f025a8785de288c4a4ceced",
        "urls": [
          "bzz-raw://d317bab758d3b73005ac27b87e2410a087ca8507538795f555d37bd2d97a028d",
          "dweb:/ipfs/QmSHDBjGYTC64LkDaTQj38DZUGNV9mzxhUYAAfaDLQYEmS"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IPoolAdminNFT.sol": {
        "keccak256": "0xa821859afd2405819b70daa367c47fc08d71b4d601effc527542862068a07403",
        "urls": [
          "bzz-raw://a4596c30e866fdcabd672824dbee8cd6c24e516aa005c8d41057c686ff18c0c8",
          "dweb:/ipfs/QmSybbMVYYwWR6BVSoLwtk6YvYzts3HXZqxBYQpxKxPgCs"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IPoolMemberNFT.sol": {
        "keccak256": "0xba6dc0dcbd8be4a96ab5f25f90977b7c71aa1eb15df1d6835ebe2b4bb46a3045",
        "urls": [
          "bzz-raw://04a7a6e769361c9cfe38751c7dede99807c5c54f50f48c1ac929bb9f5a47fd19",
          "dweb:/ipfs/QmTTAp6LoQJC2N3Ko6HKWSr55iHijRBeUAoBxpri2Uw4jr"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
        "keccak256": "0xba0407c47917aee8b6e7cea745332d2f7244cc3b91d249426f0105b365feb0ee",
        "urls": [
          "bzz-raw://4e8c38994af84e123476f8de8b81fe466e9a575374b13c38a4dc30bdd2d12c06",
          "dweb:/ipfs/QmfHrSyeMQN7wVn7qmD6aPH1wX4ugkhQXiR8te6xhADGaK"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
        "keccak256": "0x9a1cbf6d6037aac2381e8e66a2ad89e9afe6f89b290c21cb587ff6b06d137ee2",
        "urls": [
          "bzz-raw://dc53d92d863ef2eb577b59d3c4310dc170590df95d7b7455044ce3a05329a826",
          "dweb:/ipfs/QmbEuVbV83R73w3o4CgsALUWVUitodjTUKVydK8cXSRCBk"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
        "keccak256": "0xa8a3d0d97b11244bb58331dc53b8152c03337b5e7907182b15bcfcfae355cdd7",
        "urls": [
          "bzz-raw://91758fd68a25655981be1737b232b5a7bf912ed32dfa7d6c71ebe79e07a364a3",
          "dweb:/ipfs/QmPH1ZMeuFvUL3hXt6xaNfH6aUHNFASECzQM2uFtmcrBon"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
        "keccak256": "0xbfc7fbef20c707e64adabe969ea6db4d6c26a56155961a8bf46b7e55a16a046d",
        "urls": [
          "bzz-raw://355aaac71bd3ebb260d6e6a9d35f07029a6f189a5d93c23f0dfec800630ed4c0",
          "dweb:/ipfs/QmXbE4rDRjTtVoxgDjVcJtxxdmK3WZ1ZEyG8iDMcn2mtfL"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
        "keccak256": "0x6bf8494d93a4fc67d67b4a26ea9885707014f2123acd53d7cd0fd99987e30096",
        "urls": [
          "bzz-raw://93e39b9f3b7911fbe3ac17ff8872632f35b42769f9e98d39eeee98bab4be6ae7",
          "dweb:/ipfs/QmaCVVoVWa67HwrQpRK9sAtLbPjxcmnkYVbSbWUNvPuTXn"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
        "keccak256": "0xb9328d0977bd022c6771e679518c3d2bfcb6e29b400d2506813bb3cdab772bb4",
        "urls": [
          "bzz-raw://bbae7172f9ca6c0c8080bdb53cfdff158142413bc21c99508988037d0d99b258",
          "dweb:/ipfs/QmVGzmQivV2dXA1Wuj2jEP6pM1MqGY6qtHtJ1J3cqcfoBK"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
        "keccak256": "0x18ea972421ff57ce62103f90c820ee039f170f0189a4b3c73fd0ff09452d1dbf",
        "urls": [
          "bzz-raw://dd24799269920b4b7925362b41650b5b968bb957dc0dec50b451f5382fe573c1",
          "dweb:/ipfs/QmbL19zzZZSbVu2gYA3FtJLu4kbCtk9BybxCU7oJfpUbE7"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
        "keccak256": "0x479247ae4308ea9f5b50ff2bdae1299e91153a2c391a60e5d77cb3c980e527b9",
        "urls": [
          "bzz-raw://649630108e202474391d729bdc76b2d928f5569bd5922e32332430bea4086725",
          "dweb:/ipfs/QmTozaRLwTWA7rXnyadKg423sojN7xVvidwJtrPdKcYTfU"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/tokens/ISETH.sol": {
        "keccak256": "0x9857ab20198ca28d75afcf2f6843a23a1052bf2199a308392f8e2d8a63914cbc",
        "urls": [
          "bzz-raw://8321dcd14869cfb65ed07c2de950f04cf79c1d0392cb2b820f0e76e2b344d1bb",
          "dweb:/ipfs/QmRbDDTwGUkpNnSNgiugGU7r4jJLTkgAFqQfRyd3zkEBXT"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
        "keccak256": "0x5adaf0dcec7b8f91b9958c013fc3109f7b8b0efcd30391dc2bc1d98e0d406c0d",
        "urls": [
          "bzz-raw://7dcdd83f10ee1b771e8423a387cad5a1fa325c2f6f37be44dba7d45975eb6b22",
          "dweb:/ipfs/QmNhGMNgexsrxJbmGzq7ry3555t77eCgjNjeDWMD46vQrG"
        ],
        "license": "MIT"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol": {
        "keccak256": "0xa669328bd9f0718bd65500e76a6f91bd1d59dd2eb532a06c47d3a2d463653c1e",
        "urls": [
          "bzz-raw://8f41fd65689a2a49d1f271d6f1e70dd89560ff8b3ae2a9c2c0286b35a7919fe4",
          "dweb:/ipfs/QmV2sb4NWshVop8KarbVcqbxFiyb8kDgbAaejTXPpRdjZu"
        ],
        "license": "AGPLv3"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/FlowNFTBase.sol": {
        "keccak256": "0x84a0beb06890d7b278943493bc4e960b84482d4e2850739b2f43a4b33815498f",
        "urls": [
          "bzz-raw://c244d35343f22955f3184b522d4b7f8975964939d394b8f88a7673ee195d1baa",
          "dweb:/ipfs/QmedA3kyPDKetqAXXeszi9w7Ymc38VgMNajL5aw3xLWiTK"
        ],
        "license": "AGPLv3"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol": {
        "keccak256": "0x5727ab9e11a1d76b9bde364a4239b9401d8afff8c9a6f7a9bc822b5413d0cf7a",
        "urls": [
          "bzz-raw://6bd4990aa1eb94065fcca64dc94b3493729d7407ed834106ac44c5ad25fa6953",
          "dweb:/ipfs/QmSeU3GAYTJA948HjygmpmJ1avRwGg5zJQXsGWeYrow4sp"
        ],
        "license": "AGPLv3"
      },
      "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/upgradability/UUPSUtils.sol": {
        "keccak256": "0x507b0157775ffc422aee1010ab640f019dc8d653e88db6ef3c57c6486f593dc6",
        "urls": [
          "bzz-raw://a9b9c00cf8285e748baca7e61f29313965ea77342c50c31f426cd8af4b0be238",
          "dweb:/ipfs/QmWg34M9kVrXLBpwPguoyr178oZabaqRQogJebTLJp98ud"
        ],
        "license": "AGPLv3"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/ConstantOutflowNFT.sol",
    "id": 69823,
    "exportedSymbols": {
      "ConstantOutflowNFT": [
        69822
      ],
      "FlowNFTBase": [
        70669
      ],
      "IConstantInflowNFT": [
        66295
      ],
      "IConstantOutflowNFT": [
        66349
      ],
      "IERC721Metadata": [
        45241
      ],
      "IFlowNFTBase": [
        66421
      ],
      "ISuperfluid": [
        67711
      ],
      "ISuperfluidToken": [
        68136
      ]
    },
    "nodeType": "SourceUnit",
    "src": "71:7602:89",
    "nodes": [
      {
        "id": 69447,
        "nodeType": "PragmaDirective",
        "src": "71:23:89",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 69449,
        "nodeType": "ImportDirective",
        "src": "96:102:89",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 69823,
        "sourceUnit": 45242,
        "symbolAliases": [
          {
            "foreign": {
              "id": 69448,
              "name": "IERC721Metadata",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45241,
              "src": "105:15:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 69451,
        "nodeType": "ImportDirective",
        "src": "199:81:89",
        "nodes": [],
        "absolutePath": "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol",
        "file": "../interfaces/superfluid/ISuperfluidToken.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 69823,
        "sourceUnit": 68137,
        "symbolAliases": [
          {
            "foreign": {
              "id": 69450,
              "name": "ISuperfluidToken",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 68136,
              "src": "208:16:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 69453,
        "nodeType": "ImportDirective",
        "src": "281:85:89",
        "nodes": [],
        "absolutePath": "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IConstantInflowNFT.sol",
        "file": "../interfaces/superfluid/IConstantInflowNFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 69823,
        "sourceUnit": 66296,
        "symbolAliases": [
          {
            "foreign": {
              "id": 69452,
              "name": "IConstantInflowNFT",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66295,
              "src": "290:18:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 69455,
        "nodeType": "ImportDirective",
        "src": "367:87:89",
        "nodes": [],
        "absolutePath": "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/IConstantOutflowNFT.sol",
        "file": "../interfaces/superfluid/IConstantOutflowNFT.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 69823,
        "sourceUnit": 66350,
        "symbolAliases": [
          {
            "foreign": {
              "id": 69454,
              "name": "IConstantOutflowNFT",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66349,
              "src": "376:19:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 69457,
        "nodeType": "ImportDirective",
        "src": "455:71:89",
        "nodes": [],
        "absolutePath": "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol",
        "file": "../interfaces/superfluid/ISuperfluid.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 69823,
        "sourceUnit": 67712,
        "symbolAliases": [
          {
            "foreign": {
              "id": 69456,
              "name": "ISuperfluid",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 67711,
              "src": "464:11:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 69460,
        "nodeType": "ImportDirective",
        "src": "527:62:89",
        "nodes": [],
        "absolutePath": "lib/superfluid-protocol-monorepo/packages/ethereum-contracts/contracts/superfluid/FlowNFTBase.sol",
        "file": "./FlowNFTBase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 69823,
        "sourceUnit": 70670,
        "symbolAliases": [
          {
            "foreign": {
              "id": 69458,
              "name": "FlowNFTBase",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 70669,
              "src": "536:11:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 69459,
              "name": "IFlowNFTBase",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 66421,
              "src": "549:12:89",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 69822,
        "nodeType": "ContractDefinition",
        "src": "876:6796:89",
        "nodes": [
          {
            "id": 69468,
            "nodeType": "VariableDeclaration",
            "src": "946:55:89",
            "nodes": [],
            "constant": false,
            "functionSelector": "4c5c0c85",
            "mutability": "immutable",
            "name": "CONSTANT_INFLOW_NFT",
            "nameLocation": "982:19:89",
            "scope": 69822,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
              "typeString": "contract IConstantInflowNFT"
            },
            "typeName": {
              "id": 69467,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 69466,
                "name": "IConstantInflowNFT",
                "nameLocations": [
                  "946:18:89"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 66295,
                "src": "946:18:89"
              },
              "referencedDeclaration": 66295,
              "src": "946:18:89",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                "typeString": "contract IConstantInflowNFT"
              }
            },
            "visibility": "public"
          },
          {
            "id": 69474,
            "nodeType": "VariableDeclaration",
            "src": "1257:59:89",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 69469,
              "nodeType": "StructuredDocumentation",
              "src": "1008:244:89",
              "text": "@notice A mapping from token id to FlowNFTData\n FlowNFTData: { address flowSender, uint32 flowStartDate, address flowReceiver, address superToken }\n @dev The token id is uint256(keccak256(abi.encode(flowSender, flowReceiver)))"
            },
            "mutability": "mutable",
            "name": "_flowDataByTokenId",
            "nameLocation": "1298:18:89",
            "scope": 69822,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
              "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData)"
            },
            "typeName": {
              "id": 69473,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 69470,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1265:7:89",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "1257:31:89",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 69472,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 69471,
                  "name": "FlowNFTData",
                  "nameLocations": [
                    "1276:11:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 66364,
                  "src": "1276:11:89"
                },
                "referencedDeclaration": 66364,
                "src": "1276:11:89",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage_ptr",
                  "typeString": "struct IFlowNFTBase.FlowNFTData"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 69491,
            "nodeType": "FunctionDefinition",
            "src": "1372:164:89",
            "nodes": [],
            "body": {
              "id": 69490,
              "nodeType": "Block",
              "src": "1480:56:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 69488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 69486,
                      "name": "CONSTANT_INFLOW_NFT",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 69468,
                      "src": "1490:19:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                        "typeString": "contract IConstantInflowNFT"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 69487,
                      "name": "constantInflowNFT",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 69480,
                      "src": "1512:17:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                        "typeString": "contract IConstantInflowNFT"
                      }
                    },
                    "src": "1490:39:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                      "typeString": "contract IConstantInflowNFT"
                    }
                  },
                  "id": 69489,
                  "nodeType": "ExpressionStatement",
                  "src": "1490:39:89"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 69483,
                    "name": "host",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 69477,
                    "src": "1474:4:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluid_$67711",
                      "typeString": "contract ISuperfluid"
                    }
                  }
                ],
                "id": 69484,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 69482,
                  "name": "FlowNFTBase",
                  "nameLocations": [
                    "1462:11:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 70669,
                  "src": "1462:11:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "1462:17:89"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 69481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69477,
                  "mutability": "mutable",
                  "name": "host",
                  "nameLocation": "1405:4:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69491,
                  "src": "1393:16:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluid_$67711",
                    "typeString": "contract ISuperfluid"
                  },
                  "typeName": {
                    "id": 69476,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 69475,
                      "name": "ISuperfluid",
                      "nameLocations": [
                        "1393:11:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 67711,
                      "src": "1393:11:89"
                    },
                    "referencedDeclaration": 67711,
                    "src": "1393:11:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluid_$67711",
                      "typeString": "contract ISuperfluid"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69480,
                  "mutability": "mutable",
                  "name": "constantInflowNFT",
                  "nameLocation": "1438:17:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69491,
                  "src": "1419:36:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                    "typeString": "contract IConstantInflowNFT"
                  },
                  "typeName": {
                    "id": 69479,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 69478,
                      "name": "IConstantInflowNFT",
                      "nameLocations": [
                        "1419:18:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66295,
                      "src": "1419:18:89"
                    },
                    "referencedDeclaration": 66295,
                    "src": "1419:18:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                      "typeString": "contract IConstantInflowNFT"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1383:78:89"
            },
            "returnParameters": {
              "id": 69485,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1480:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 69502,
            "nodeType": "FunctionDefinition",
            "src": "1616:209:89",
            "nodes": [],
            "body": {
              "id": 69501,
              "nodeType": "Block",
              "src": "1680:145:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "6f72672e7375706572666c7569642d66696e616e63652e636f6e7472616374732e436f6e7374616e744f7574666c6f774e46542e696d706c656d656e746174696f6e",
                        "id": 69498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1736:68:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784",
                          "typeString": "literal_string \"org.superfluid-finance.contracts.ConstantOutflowNFT.implementation\""
                        },
                        "value": "org.superfluid-finance.contracts.ConstantOutflowNFT.implementation"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_87e44dce6a0d65a5ccf441783661f5727c2624b1f0088bbe957ce2c95406b784",
                          "typeString": "literal_string \"org.superfluid-finance.contracts.ConstantOutflowNFT.implementation\""
                        }
                      ],
                      "id": 69497,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "1709:9:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 69499,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1709:109:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 69496,
                  "id": 69500,
                  "nodeType": "Return",
                  "src": "1690:128:89"
                }
              ]
            },
            "baseFunctions": [
              77512
            ],
            "functionSelector": "52d1902d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "proxiableUUID",
            "nameLocation": "1625:13:89",
            "overrides": {
              "id": 69493,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1653:8:89"
            },
            "parameters": {
              "id": 69492,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1638:2:89"
            },
            "returnParameters": {
              "id": 69496,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69495,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 69502,
                  "src": "1671:7:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 69494,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1671:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1670:9:89"
            },
            "scope": 69822,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 69521,
            "nodeType": "FunctionDefinition",
            "src": "2006:235:89",
            "nodes": [],
            "body": {
              "id": 69520,
              "nodeType": "Block",
              "src": "2186:55:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 69518,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 69514,
                      "name": "flowData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 69512,
                      "src": "2196:8:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$66364_memory_ptr",
                        "typeString": "struct IFlowNFTBase.FlowNFTData memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "baseExpression": {
                        "id": 69515,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69474,
                        "src": "2207:18:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 69517,
                      "indexExpression": {
                        "id": 69516,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69505,
                        "src": "2226:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "2207:27:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "src": "2196:38:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$66364_memory_ptr",
                      "typeString": "struct IFlowNFTBase.FlowNFTData memory"
                    }
                  },
                  "id": 69519,
                  "nodeType": "ExpressionStatement",
                  "src": "2196:38:89"
                }
              ]
            },
            "baseFunctions": [
              66396,
              70621
            ],
            "documentation": {
              "id": 69503,
              "nodeType": "StructuredDocumentation",
              "src": "1831:170:89",
              "text": "@notice An external function for querying flow data by `tokenId``\n @param tokenId the token id\n @return flowData the flow data associated with `tokenId`"
            },
            "functionSelector": "8d47859e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "flowDataByTokenId",
            "nameLocation": "2015:17:89",
            "overrides": {
              "id": 69509,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 69507,
                  "name": "FlowNFTBase",
                  "nameLocations": [
                    "2109:11:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 70669,
                  "src": "2109:11:89"
                },
                {
                  "id": 69508,
                  "name": "IFlowNFTBase",
                  "nameLocations": [
                    "2122:12:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 66421,
                  "src": "2122:12:89"
                }
              ],
              "src": "2100:35:89"
            },
            "parameters": {
              "id": 69506,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69505,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2050:7:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69521,
                  "src": "2042:15:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 69504,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2042:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2032:31:89"
            },
            "returnParameters": {
              "id": 69513,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69512,
                  "mutability": "mutable",
                  "name": "flowData",
                  "nameLocation": "2172:8:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69521,
                  "src": "2153:27:89",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FlowNFTData_$66364_memory_ptr",
                    "typeString": "struct IFlowNFTBase.FlowNFTData"
                  },
                  "typeName": {
                    "id": 69511,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 69510,
                      "name": "FlowNFTData",
                      "nameLocations": [
                        "2153:11:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 66364,
                      "src": "2153:11:89"
                    },
                    "referencedDeclaration": 66364,
                    "src": "2153:11:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage_ptr",
                      "typeString": "struct IFlowNFTBase.FlowNFTData"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2152:29:89"
            },
            "scope": 69822,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 69537,
            "nodeType": "FunctionDefinition",
            "src": "2247:211:89",
            "nodes": [],
            "body": {
              "id": 69536,
              "nodeType": "Block",
              "src": "2409:49:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 69532,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69523,
                        "src": "2436:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 69533,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2445:5:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 69531,
                      "name": "_tokenURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70161,
                      "src": "2426:9:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bool_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256,bool) view returns (string memory)"
                      }
                    },
                    "id": 69534,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2426:25:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 69530,
                  "id": 69535,
                  "nodeType": "Return",
                  "src": "2419:32:89"
                }
              ]
            },
            "baseFunctions": [
              45240,
              70098
            ],
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "2256:8:89",
            "overrides": {
              "id": 69527,
              "nodeType": "OverrideSpecifier",
              "overrides": [
                {
                  "id": 69525,
                  "name": "FlowNFTBase",
                  "nameLocations": [
                    "2343:11:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 70669,
                  "src": "2343:11:89"
                },
                {
                  "id": 69526,
                  "name": "IERC721Metadata",
                  "nameLocations": [
                    "2356:15:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 45241,
                  "src": "2356:15:89"
                }
              ],
              "src": "2334:38:89"
            },
            "parameters": {
              "id": 69524,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69523,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "2282:7:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69537,
                  "src": "2274:15:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 69522,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2274:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2264:31:89"
            },
            "returnParameters": {
              "id": 69530,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69529,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 69537,
                  "src": "2390:13:89",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 69528,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2390:6:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2389:15:89"
            },
            "scope": 69822,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 69590,
            "nodeType": "FunctionDefinition",
            "src": "2873:633:89",
            "nodes": [],
            "body": {
              "id": 69589,
              "nodeType": "Block",
              "src": "3020:486:89",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    69551
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 69551,
                      "mutability": "mutable",
                      "name": "newTokenId",
                      "nameLocation": "3158:10:89",
                      "nodeType": "VariableDeclaration",
                      "scope": 69589,
                      "src": "3150:18:89",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 69550,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3150:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 69560,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 69555,
                            "name": "superToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69541,
                            "src": "3204:10:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                              "typeString": "contract ISuperfluidToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                              "typeString": "contract ISuperfluidToken"
                            }
                          ],
                          "id": 69554,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3196:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 69553,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3196:7:89",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 69556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3196:19:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69557,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69543,
                        "src": "3229:10:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69558,
                        "name": "flowReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69545,
                        "src": "3253:12:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 69552,
                      "name": "_getTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70349,
                      "src": "3171:11:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address,address) view returns (uint256)"
                      }
                    },
                    "id": 69559,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3171:104:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3150:125:89"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 69569,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 69561,
                          "name": "_flowDataByTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69474,
                          "src": "3289:18:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                            "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                          }
                        },
                        "id": 69563,
                        "indexExpression": {
                          "id": 69562,
                          "name": "newTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69551,
                          "src": "3308:10:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3289:30:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                          "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                        }
                      },
                      "id": 69564,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3320:10:89",
                      "memberName": "flowSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66359,
                      "src": "3289:41:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 69567,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3342:1:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 69566,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "3334:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 69565,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3334:7:89",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 69568,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3334:10:89",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3289:55:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 69588,
                  "nodeType": "IfStatement",
                  "src": "3285:215:89",
                  "trueBody": {
                    "id": 69587,
                    "nodeType": "Block",
                    "src": "3346:154:89",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 69573,
                                  "name": "superToken",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 69541,
                                  "src": "3374:10:89",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                                    "typeString": "contract ISuperfluidToken"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                                    "typeString": "contract ISuperfluidToken"
                                  }
                                ],
                                "id": 69572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3366:7:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 69571,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3366:7:89",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 69574,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3366:19:89",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 69575,
                              "name": "flowSender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69543,
                              "src": "3387:10:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 69576,
                              "name": "flowReceiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69545,
                              "src": "3399:12:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 69577,
                              "name": "newTokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69551,
                              "src": "3413:10:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 69570,
                            "name": "_mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69771,
                            "src": "3360:5:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,address,uint256)"
                            }
                          },
                          "id": 69578,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3360:64:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69579,
                        "nodeType": "ExpressionStatement",
                        "src": "3360:64:89"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 69583,
                              "name": "flowReceiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69545,
                              "src": "3464:12:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 69584,
                              "name": "newTokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69551,
                              "src": "3478:10:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 69580,
                              "name": "CONSTANT_INFLOW_NFT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69468,
                              "src": "3439:19:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                                "typeString": "contract IConstantInflowNFT"
                              }
                            },
                            "id": 69582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3459:4:89",
                            "memberName": "mint",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 66288,
                            "src": "3439:24:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256) external"
                            }
                          },
                          "id": 69585,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3439:50:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69586,
                        "nodeType": "ExpressionStatement",
                        "src": "3439:50:89"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              66326
            ],
            "documentation": {
              "id": 69538,
              "nodeType": "StructuredDocumentation",
              "src": "2464:404:89",
              "text": "@notice Hook called by CFA contract on flow creation\n @dev This function mints the COF NFT to the flow sender and mints the CIF NFT to the flow receiver\n @param superToken the SuperToken contract address\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n NOTE: We do an existence check in here to determine whether or not to execute the hook"
            },
            "functionSelector": "f7e3d983",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 69548,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 69547,
                  "name": "onlyFlowAgreements",
                  "nameLocations": [
                    "3001:18:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 69821,
                  "src": "3001:18:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "3001:18:89"
              }
            ],
            "name": "onCreate",
            "nameLocation": "2882:8:89",
            "parameters": {
              "id": 69546,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69541,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "2917:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69590,
                  "src": "2900:27:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 69540,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 69539,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "2900:16:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 68136,
                      "src": "2900:16:89"
                    },
                    "referencedDeclaration": 68136,
                    "src": "2900:16:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69543,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "2945:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69590,
                  "src": "2937:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69542,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2937:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69545,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "2973:12:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69590,
                  "src": "2965:20:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69544,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2965:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2890:101:89"
            },
            "returnParameters": {
              "id": 69549,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3020:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 69636,
            "nodeType": "FunctionDefinition",
            "src": "3893:474:89",
            "nodes": [],
            "body": {
              "id": 69635,
              "nodeType": "Block",
              "src": "4040:327:89",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    69604
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 69604,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "4058:7:89",
                      "nodeType": "VariableDeclaration",
                      "scope": 69635,
                      "src": "4050:15:89",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 69603,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4050:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 69613,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 69608,
                            "name": "superToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69594,
                            "src": "4101:10:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                              "typeString": "contract ISuperfluidToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                              "typeString": "contract ISuperfluidToken"
                            }
                          ],
                          "id": 69607,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4093:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 69606,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4093:7:89",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 69609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4093:19:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69610,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69596,
                        "src": "4126:10:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69611,
                        "name": "flowReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69598,
                        "src": "4150:12:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 69605,
                      "name": "_getTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70349,
                      "src": "4068:11:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address,address) view returns (uint256)"
                      }
                    },
                    "id": 69612,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4068:104:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4050:122:89"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 69622,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 69614,
                          "name": "_flowDataByTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69474,
                          "src": "4186:18:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                            "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                          }
                        },
                        "id": 69616,
                        "indexExpression": {
                          "id": 69615,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69604,
                          "src": "4205:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4186:27:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                          "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                        }
                      },
                      "id": 69617,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4214:10:89",
                      "memberName": "flowSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66359,
                      "src": "4186:38:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 69620,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4236:1:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 69619,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4228:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 69618,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4228:7:89",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 69621,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4228:10:89",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4186:52:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 69634,
                  "nodeType": "IfStatement",
                  "src": "4182:179:89",
                  "trueBody": {
                    "id": 69633,
                    "nodeType": "Block",
                    "src": "4240:121:89",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 69624,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69604,
                              "src": "4277:7:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 69623,
                            "name": "_triggerMetadataUpdate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 70559,
                            "src": "4254:22:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 69625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4254:31:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69626,
                        "nodeType": "ExpressionStatement",
                        "src": "4254:31:89"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 69630,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69604,
                              "src": "4342:7:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 69627,
                              "name": "CONSTANT_INFLOW_NFT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69468,
                              "src": "4300:19:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                                "typeString": "contract IConstantInflowNFT"
                              }
                            },
                            "id": 69629,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4320:21:89",
                            "memberName": "triggerMetadataUpdate",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 66420,
                            "src": "4300:41:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 69631,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4300:50:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69632,
                        "nodeType": "ExpressionStatement",
                        "src": "4300:50:89"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              66337
            ],
            "documentation": {
              "id": 69591,
              "nodeType": "StructuredDocumentation",
              "src": "3512:376:89",
              "text": "@notice Hook called by CFA contract on flow update\n @dev This function triggers the metadata update of both COF and CIF NFTs\n @param superToken the SuperToken contract address\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n NOTE: We do an existence check in here to determine whether or not to execute the hook"
            },
            "functionSelector": "eb54a7ca",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 69601,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 69600,
                  "name": "onlyFlowAgreements",
                  "nameLocations": [
                    "4021:18:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 69821,
                  "src": "4021:18:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "4021:18:89"
              }
            ],
            "name": "onUpdate",
            "nameLocation": "3902:8:89",
            "parameters": {
              "id": 69599,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69594,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "3937:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69636,
                  "src": "3920:27:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 69593,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 69592,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "3920:16:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 68136,
                      "src": "3920:16:89"
                    },
                    "referencedDeclaration": 68136,
                    "src": "3920:16:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69596,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "3965:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69636,
                  "src": "3957:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69595,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3957:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69598,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "3993:12:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69636,
                  "src": "3985:20:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69597,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3985:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3910:101:89"
            },
            "returnParameters": {
              "id": 69602,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4040:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 69682,
            "nodeType": "FunctionDefinition",
            "src": "4742:535:89",
            "nodes": [],
            "body": {
              "id": 69681,
              "nodeType": "Block",
              "src": "4889:388:89",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    69650
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 69650,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "nameLocation": "4907:7:89",
                      "nodeType": "VariableDeclaration",
                      "scope": 69681,
                      "src": "4899:15:89",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 69649,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4899:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 69659,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 69654,
                            "name": "superToken",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 69640,
                            "src": "4950:10:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                              "typeString": "contract ISuperfluidToken"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                              "typeString": "contract ISuperfluidToken"
                            }
                          ],
                          "id": 69653,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4942:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 69652,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4942:7:89",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 69655,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4942:19:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69656,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69642,
                        "src": "4975:10:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69657,
                        "name": "flowReceiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69644,
                        "src": "4999:12:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 69651,
                      "name": "_getTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 70349,
                      "src": "4917:11:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address,address,address) view returns (uint256)"
                      }
                    },
                    "id": 69658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4917:104:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4899:122:89"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 69668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 69660,
                          "name": "_flowDataByTokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69474,
                          "src": "5035:18:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                            "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                          }
                        },
                        "id": 69662,
                        "indexExpression": {
                          "id": 69661,
                          "name": "tokenId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69650,
                          "src": "5054:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5035:27:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                          "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                        }
                      },
                      "id": 69663,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "5063:10:89",
                      "memberName": "flowSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 66359,
                      "src": "5035:38:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 69666,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "5085:1:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 69665,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "5077:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 69664,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5077:7:89",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 69667,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "5077:10:89",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "5035:52:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 69680,
                  "nodeType": "IfStatement",
                  "src": "5031:240:89",
                  "trueBody": {
                    "id": 69679,
                    "nodeType": "Block",
                    "src": "5089:182:89",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 69672,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69650,
                              "src": "5223:7:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 69669,
                              "name": "CONSTANT_INFLOW_NFT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69468,
                              "src": "5198:19:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IConstantInflowNFT_$66295",
                                "typeString": "contract IConstantInflowNFT"
                              }
                            },
                            "id": 69671,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5218:4:89",
                            "memberName": "burn",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 66294,
                            "src": "5198:24:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 69673,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5198:33:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69674,
                        "nodeType": "ExpressionStatement",
                        "src": "5198:33:89"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 69676,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69650,
                              "src": "5252:7:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 69675,
                            "name": "_burn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              69805
                            ],
                            "referencedDeclaration": 69805,
                            "src": "5246:5:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 69677,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5246:14:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69678,
                        "nodeType": "ExpressionStatement",
                        "src": "5246:14:89"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              66348
            ],
            "documentation": {
              "id": 69637,
              "nodeType": "StructuredDocumentation",
              "src": "4373:364:89",
              "text": "@notice Hook called by CFA contract on flow deletion\n @dev This function burns the COF NFT and burns the CIF NFT\n @param superToken the SuperToken contract address\n @param flowSender the flow sender\n @param flowReceiver the flow receiver\n NOTE: We do an existence check in here to determine whether or not to execute the hook"
            },
            "functionSelector": "ef1f0237",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 69647,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 69646,
                  "name": "onlyFlowAgreements",
                  "nameLocations": [
                    "4870:18:89"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 69821,
                  "src": "4870:18:89"
                },
                "nodeType": "ModifierInvocation",
                "src": "4870:18:89"
              }
            ],
            "name": "onDelete",
            "nameLocation": "4751:8:89",
            "parameters": {
              "id": 69645,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69640,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "4786:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69682,
                  "src": "4769:27:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                    "typeString": "contract ISuperfluidToken"
                  },
                  "typeName": {
                    "id": 69639,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 69638,
                      "name": "ISuperfluidToken",
                      "nameLocations": [
                        "4769:16:89"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 68136,
                      "src": "4769:16:89"
                    },
                    "referencedDeclaration": 68136,
                    "src": "4769:16:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ISuperfluidToken_$68136",
                      "typeString": "contract ISuperfluidToken"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69642,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "4814:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69682,
                  "src": "4806:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69641,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4806:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69644,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "4842:12:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69682,
                  "src": "4834:20:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69643,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4834:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4759:101:89"
            },
            "returnParameters": {
              "id": 69648,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4889:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 69697,
            "nodeType": "FunctionDefinition",
            "src": "5315:160:89",
            "nodes": [],
            "body": {
              "id": 69696,
              "nodeType": "Block",
              "src": "5413:62:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "baseExpression": {
                        "id": 69691,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69474,
                        "src": "5430:18:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 69693,
                      "indexExpression": {
                        "id": 69692,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69685,
                        "src": "5449:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "5430:27:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "id": 69694,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "5458:10:89",
                    "memberName": "flowSender",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 66359,
                    "src": "5430:38:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 69690,
                  "id": 69695,
                  "nodeType": "Return",
                  "src": "5423:45:89"
                }
              ]
            },
            "baseFunctions": [
              70629
            ],
            "documentation": {
              "id": 69683,
              "nodeType": "StructuredDocumentation",
              "src": "5283:27:89",
              "text": "@inheritdoc FlowNFTBase"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_ownerOf",
            "nameLocation": "5324:8:89",
            "overrides": {
              "id": 69687,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5386:8:89"
            },
            "parameters": {
              "id": 69686,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69685,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "5350:7:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69697,
                  "src": "5342:15:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 69684,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5342:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5332:31:89"
            },
            "returnParameters": {
              "id": 69690,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69689,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 69697,
                  "src": "5404:7:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69688,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5404:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5403:9:89"
            },
            "scope": 69822,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 69712,
            "nodeType": "FunctionDefinition",
            "src": "5615:186:89",
            "nodes": [],
            "body": {
              "id": 69711,
              "nodeType": "Block",
              "src": "5744:57:89",
              "nodes": [],
              "statements": [
                {
                  "errorCall": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 69708,
                      "name": "CFA_NFT_TRANSFER_IS_NOT_ALLOWED",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 66380,
                      "src": "5761:31:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 69709,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5761:33:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69710,
                  "nodeType": "RevertStatement",
                  "src": "5754:40:89"
                }
              ]
            },
            "baseFunctions": [
              70638
            ],
            "documentation": {
              "id": 69698,
              "nodeType": "StructuredDocumentation",
              "src": "5481:129:89",
              "text": "@notice Reverts - Transfer of outflow NFT is not allowed.\n @dev We revert when users attempt to transfer outflow NFTs."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_transfer",
            "nameLocation": "5624:9:89",
            "overrides": {
              "id": 69706,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "5735:8:89"
            },
            "parameters": {
              "id": 69705,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69700,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 69712,
                  "src": "5643:7:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69699,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5643:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69702,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 69712,
                  "src": "5669:7:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69701,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5669:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69704,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 69712,
                  "src": "5693:7:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 69703,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5693:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5633:84:89"
            },
            "returnParameters": {
              "id": 69707,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5744:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 69771,
            "nodeType": "FunctionDefinition",
            "src": "6301:637:89",
            "nodes": [],
            "body": {
              "id": 69770,
              "nodeType": "Block",
              "src": "6445:493:89",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 69730,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 69725,
                          "name": "flowSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69717,
                          "src": "6462:10:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 69728,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6484:1:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 69727,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6476:7:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 69726,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6476:7:89",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 69729,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6476:10:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6462:24:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 69724,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "6455:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 69731,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6455:32:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69732,
                  "nodeType": "ExpressionStatement",
                  "src": "6455:32:89"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 69736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 69734,
                          "name": "flowSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69717,
                          "src": "6504:10:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "id": 69735,
                          "name": "flowReceiver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69719,
                          "src": "6518:12:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6504:26:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 69733,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "6497:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 69737,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6497:34:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69738,
                  "nodeType": "ExpressionStatement",
                  "src": "6497:34:89"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 69743,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "6548:20:89",
                        "subExpression": {
                          "arguments": [
                            {
                              "id": 69741,
                              "name": "newTokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 69721,
                              "src": "6557:10:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 69740,
                            "name": "_exists",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 70549,
                            "src": "6549:7:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                              "typeString": "function (uint256) view returns (bool)"
                            }
                          },
                          "id": 69742,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6549:19:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 69739,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "6541:6:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 69744,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6541:28:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69745,
                  "nodeType": "ExpressionStatement",
                  "src": "6541:28:89"
                },
                {
                  "expression": {
                    "id": 69759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 69746,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69474,
                        "src": "6631:18:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 69748,
                      "indexExpression": {
                        "id": 69747,
                        "name": "newTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69721,
                        "src": "6650:10:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6631:30:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 69750,
                          "name": "superToken",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69715,
                          "src": "6689:10:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 69751,
                          "name": "flowSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69717,
                          "src": "6713:10:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "id": 69752,
                          "name": "flowReceiver",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69719,
                          "src": "6737:12:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        {
                          "arguments": [
                            {
                              "expression": {
                                "id": 69755,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -4,
                                "src": "6770:5:89",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 69756,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6776:9:89",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "6770:15:89",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 69754,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6763:6:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint32_$",
                              "typeString": "type(uint32)"
                            },
                            "typeName": {
                              "id": 69753,
                              "name": "uint32",
                              "nodeType": "ElementaryTypeName",
                              "src": "6763:6:89",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 69757,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6763:23:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        ],
                        "id": 69749,
                        "name": "FlowNFTData",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 66364,
                        "src": "6664:11:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_struct$_FlowNFTData_$66364_storage_ptr_$",
                          "typeString": "type(struct IFlowNFTBase.FlowNFTData storage pointer)"
                        }
                      },
                      "id": 69758,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "structConstructorCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6664:149:89",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$66364_memory_ptr",
                        "typeString": "struct IFlowNFTBase.FlowNFTData memory"
                      }
                    },
                    "src": "6631:182:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                      "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                    }
                  },
                  "id": 69760,
                  "nodeType": "ExpressionStatement",
                  "src": "6631:182:89"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 69764,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6904:1:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 69763,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "6896:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 69762,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "6896:7:89",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 69765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6896:10:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69766,
                        "name": "flowSender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69717,
                        "src": "6908:10:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69767,
                        "name": "newTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69721,
                        "src": "6920:10:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 69761,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45113,
                      "src": "6887:8:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 69768,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6887:44:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69769,
                  "nodeType": "EmitStatement",
                  "src": "6882:49:89"
                }
              ]
            },
            "documentation": {
              "id": 69713,
              "nodeType": "StructuredDocumentation",
              "src": "5807:489:89",
              "text": "@notice Mints `newTokenId` and transfers it to `flowSender`\n @dev `newTokenId` must not exist `flowSender` cannot be `address(0)` and we emit a {Transfer} event.\n `flowSender` cannot be equal to `flowReceiver`.\n @param superToken the SuperToken contract address\n @param flowSender the receiver of the newly minted outflow nft (to)\n @param flowReceiver the flow receiver (owner of the InflowNFT)\n @param newTokenId the new token id to be minted"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_mint",
            "nameLocation": "6310:5:89",
            "parameters": {
              "id": 69722,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69715,
                  "mutability": "mutable",
                  "name": "superToken",
                  "nameLocation": "6333:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69771,
                  "src": "6325:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69714,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6325:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69717,
                  "mutability": "mutable",
                  "name": "flowSender",
                  "nameLocation": "6361:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69771,
                  "src": "6353:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69716,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6353:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69719,
                  "mutability": "mutable",
                  "name": "flowReceiver",
                  "nameLocation": "6389:12:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69771,
                  "src": "6381:20:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 69718,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6381:7:89",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 69721,
                  "mutability": "mutable",
                  "name": "newTokenId",
                  "nameLocation": "6419:10:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69771,
                  "src": "6411:18:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 69720,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6411:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6315:120:89"
            },
            "returnParameters": {
              "id": 69723,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6445:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 69805,
            "nodeType": "FunctionDefinition",
            "src": "7158:332:89",
            "nodes": [],
            "body": {
              "id": 69804,
              "nodeType": "Block",
              "src": "7208:282:89",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    69779
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 69779,
                      "mutability": "mutable",
                      "name": "owner",
                      "nameLocation": "7226:5:89",
                      "nodeType": "VariableDeclaration",
                      "scope": 69804,
                      "src": "7218:13:89",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 69778,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7218:7:89",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 69783,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 69781,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69774,
                        "src": "7243:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 69780,
                      "name": "_ownerOf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        69697
                      ],
                      "referencedDeclaration": 69697,
                      "src": "7234:8:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 69782,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7234:17:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7218:33:89"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 69787,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69774,
                        "src": "7274:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 69784,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "7262:5:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ConstantOutflowNFT_$69822_$",
                          "typeString": "type(contract super ConstantOutflowNFT)"
                        }
                      },
                      "id": 69786,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7268:5:89",
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 70668,
                      "src": "7262:11:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 69788,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7262:20:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69789,
                  "nodeType": "ExpressionStatement",
                  "src": "7262:20:89"
                },
                {
                  "expression": {
                    "id": 69793,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "7346:34:89",
                    "subExpression": {
                      "baseExpression": {
                        "id": 69790,
                        "name": "_flowDataByTokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69474,
                        "src": "7353:18:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_FlowNFTData_$66364_storage_$",
                          "typeString": "mapping(uint256 => struct IFlowNFTBase.FlowNFTData storage ref)"
                        }
                      },
                      "id": 69792,
                      "indexExpression": {
                        "id": 69791,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69774,
                        "src": "7372:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "7353:27:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_FlowNFTData_$66364_storage",
                        "typeString": "struct IFlowNFTBase.FlowNFTData storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69794,
                  "nodeType": "ExpressionStatement",
                  "src": "7346:34:89"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 69796,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69779,
                        "src": "7456:5:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "30",
                            "id": 69799,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7471:1:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 69798,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "7463:7:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 69797,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "7463:7:89",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 69800,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7463:10:89",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 69801,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 69774,
                        "src": "7475:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 69795,
                      "name": "Transfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 45113,
                      "src": "7447:8:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 69802,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7447:36:89",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69803,
                  "nodeType": "EmitStatement",
                  "src": "7442:41:89"
                }
              ]
            },
            "baseFunctions": [
              70668
            ],
            "documentation": {
              "id": 69772,
              "nodeType": "StructuredDocumentation",
              "src": "6944:209:89",
              "text": "@notice Destroys token with `tokenId` and clears approvals from previous owner.\n @dev `tokenId` must exist AND we emit a {Transfer} event\n @param tokenId the id of the token we are destroying"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nameLocation": "7167:5:89",
            "overrides": {
              "id": 69776,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "7199:8:89"
            },
            "parameters": {
              "id": 69775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 69774,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "7181:7:89",
                  "nodeType": "VariableDeclaration",
                  "scope": 69805,
                  "src": "7173:15:89",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 69773,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7173:7:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7172:17:89"
            },
            "returnParameters": {
              "id": 69777,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7208:0:89"
            },
            "scope": 69822,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 69821,
            "nodeType": "ModifierDefinition",
            "src": "7496:174:89",
            "nodes": [],
            "body": {
              "id": 69820,
              "nodeType": "Block",
              "src": "7526:144:89",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 69813,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 69807,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "7540:3:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 69808,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7544:6:89",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "7540:10:89",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "id": 69811,
                          "name": "CONSTANT_FLOW_AGREEMENT_V1",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 69861,
                          "src": "7562:26:89",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$65383",
                            "typeString": "contract IConstantFlowAgreementV1"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IConstantFlowAgreementV1_$65383",
                            "typeString": "contract IConstantFlowAgreementV1"
                          }
                        ],
                        "id": 69810,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "7554:7:89",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 69809,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7554:7:89",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 69812,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7554:35:89",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "7540:49:89",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 69818,
                  "nodeType": "IfStatement",
                  "src": "7536:117:89",
                  "trueBody": {
                    "id": 69817,
                    "nodeType": "Block",
                    "src": "7591:62:89",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 69814,
                            "name": "COF_NFT_ONLY_FLOW_AGREEMENTS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 66313,
                            "src": "7612:28:89",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 69815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7612:30:89",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 69816,
                        "nodeType": "RevertStatement",
                        "src": "7605:37:89"
                      }
                    ]
                  }
                },
                {
                  "id": 69819,
                  "nodeType": "PlaceholderStatement",
                  "src": "7662:1:89"
                }
              ]
            },
            "name": "onlyFlowAgreements",
            "nameLocation": "7505:18:89",
            "parameters": {
              "id": 69806,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7523:2:89"
            },
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 69462,
              "name": "FlowNFTBase",
              "nameLocations": [
                "907:11:89"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 70669,
              "src": "907:11:89"
            },
            "id": 69463,
            "nodeType": "InheritanceSpecifier",
            "src": "907:11:89"
          },
          {
            "baseName": {
              "id": 69464,
              "name": "IConstantOutflowNFT",
              "nameLocations": [
                "920:19:89"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 66349,
              "src": "920:19:89"
            },
            "id": 69465,
            "nodeType": "InheritanceSpecifier",
            "src": "920:19:89"
          }
        ],
        "canonicalName": "ConstantOutflowNFT",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 69461,
          "nodeType": "StructuredDocumentation",
          "src": "591:285:89",
          "text": "@title ConstantOutflowNFT contract (COF NFT)\n @author Superfluid\n @notice The ConstantOutflowNFT contract to be minted to the flow sender on flow creation.\n @dev This contract uses mint/burn interface for flow creation/deletion and holds the actual storage for both NFTs."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          69822,
          66349,
          70669,
          66421,
          45241,
          45214,
          46061,
          77572,
          43996
        ],
        "name": "ConstantOutflowNFT",
        "nameLocation": "885:18:89",
        "scope": 69823,
        "usedErrors": [
          66305,
          66307,
          66309,
          66311,
          66313,
          66315,
          66366,
          66368,
          66370,
          66372,
          66374,
          66376,
          66378,
          66380,
          66382
        ]
      }
    ],
    "license": "AGPLv3"
  },
  "id": 89
}